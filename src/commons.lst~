commons                                                                                                                 PAGE 1
                 =1      1     $include(REG52.inc) ;Utilizando reg52 para termos acesso ao terceiro timer caso necessário
                 =1      2     ;----------------------------------------------
                 =1      3     ; 8052 Processor Declarations
                 =1      4     ; Copyright (c) Raisonance SA, 1987-2003
                 =1      5     ;----------------------------------------------
                 =1      6
                 =1      7     ; BYTE Registers
  0080           =1      8     P0      DATA    80H
****ERROR:Tryingtooverwriteconstant:p0
  0090           =1      9     P1      DATA    90H
****ERROR:Tryingtooverwriteconstant:p1
  00A0           =1     10     P2      DATA    0A0H
****ERROR:Tryingtooverwriteconstant:p2
  00B0           =1     11     P3      DATA    0B0H
****ERROR:Tryingtooverwriteconstant:p3
  00D0           =1     12     PSW     DATA    0D0H
****ERROR:Tryingtooverwriteconstant:psw
  00E0           =1     13     ACC     DATA    0E0H
****ERROR:Tryingtooverwriteconstant:acc
  00F0           =1     14     B       DATA    0F0H
****ERROR:Tryingtooverwriteconstant:b
  0081           =1     15     SP      DATA    81H
****ERROR:Tryingtooverwriteconstant:sp
  0082           =1     16     DPL     DATA    82H
****ERROR:Tryingtooverwriteconstant:dpl
  0083           =1     17     DPH     DATA    83H
****ERROR:Tryingtooverwriteconstant:dph
  0087           =1     18     PCON    DATA    87H
****ERROR:Tryingtooverwriteconstant:pcon
  0088           =1     19     TCON    DATA    88H
****ERROR:Tryingtooverwriteconstant:tcon
  0089           =1     20     TMOD    DATA    89H
****ERROR:Tryingtooverwriteconstant:tmod
  008A           =1     21     TL0     DATA    8AH
****ERROR:Tryingtooverwriteconstant:tl0
  008B           =1     22     TL1     DATA    8BH
****ERROR:Tryingtooverwriteconstant:tl1
  008C           =1     23     TH0     DATA    8CH
****ERROR:Tryingtooverwriteconstant:th0
  008D           =1     24     TH1     DATA    8DH
****ERROR:Tryingtooverwriteconstant:th1
  00A8           =1     25     IE      DATA    0A8H
****ERROR:Tryingtooverwriteconstant:ie
  00B8           =1     26     IP      DATA    0B8H
****ERROR:Tryingtooverwriteconstant:ip
  0098           =1     27     SCON    DATA    98H
****ERROR:Tryingtooverwriteconstant:scon
  0099           =1     28     SBUF    DATA    99H
****ERROR:Tryingtooverwriteconstant:sbuf
                 =1     29
                 =1     30     ; 8052 Extensions
  00C8           =1     31     T2CON   DATA    0C8H
****ERROR:Tryingtooverwriteconstant:t2con
  00CA           =1     32     RCAP2L  DATA    0CAH
****ERROR:Tryingtooverwriteconstant:rcap2l
  00CB           =1     33     RCAP2H  DATA    0CBH
****ERROR:Tryingtooverwriteconstant:rcap2h
  00CC           =1     34     TL2     DATA    0CCH
****ERROR:Tryingtooverwriteconstant:tl2
  00CD           =1     35     TH2     DATA    0CDH
****ERROR:Tryingtooverwriteconstant:th2
                 =1     36
                 =1     37
                 =1     38     ; BIT Registers
                 =1     39     ; PSW
  00D7           =1     40     CY      BIT     0D7H
****ERROR:Tryingtooverwriteconstant:cy
  00D6           =1     41     AC      BIT     0D6H
****ERROR:Tryingtooverwriteconstant:ac
  00D5           =1     42     F0      BIT     0D5H
****ERROR:Tryingtooverwriteconstant:f0
  00D4           =1     43     RS1     BIT     0D4H
****ERROR:Tryingtooverwriteconstant:rs1
  00D3           =1     44     RS0     BIT     0D3H
****ERROR:Tryingtooverwriteconstant:rs0
  00D2           =1     45     OV      BIT     0D2H
****ERROR:Tryingtooverwriteconstant:ov
  00D1           =1     46     F1      BIT     0D1H
  00D0           =1     47     P       BIT     0D0H
****ERROR:Tryingtooverwriteconstant:p
                 =1     48     ; TCON
  008F           =1     49     TF1     BIT     8FH
****ERROR:Tryingtooverwriteconstant:tf1
  008E           =1     50     TR1     BIT     8EH
****ERROR:Tryingtooverwriteconstant:tr1
  008D           =1     51     TF0     BIT     8DH
****ERROR:Tryingtooverwriteconstant:tf0
  008C           =1     52     TR0     BIT     8CH
****ERROR:Tryingtooverwriteconstant:tr0
  008B           =1     53     IE1     BIT     8BH
****ERROR:Tryingtooverwriteconstant:ie1
  008A           =1     54     IT1     BIT     8AH
****ERROR:Tryingtooverwriteconstant:it1
  0089           =1     55     IE0     BIT     89H
****ERROR:Tryingtooverwriteconstant:ie0
  0088           =1     56     IT0     BIT     88H
****ERROR:Tryingtooverwriteconstant:it0
                 =1     57     ; IE
  00AF           =1     58     EA      BIT     0AFH
****ERROR:Tryingtooverwriteconstant:ea
  00AC           =1     59     ES      BIT     0ACH
****ERROR:Tryingtooverwriteconstant:es
  00AB           =1     60     ET1     BIT     0ABH
****ERROR:Tryingtooverwriteconstant:et1
  00AA           =1     61     EX1     BIT     0AAH
****ERROR:Tryingtooverwriteconstant:ex1
  00A9           =1     62     ET0     BIT     0A9H
****ERROR:Tryingtooverwriteconstant:et0
  00A8           =1     63     EX0     BIT     0A8H
****ERROR:Tryingtooverwriteconstant:ex0
                 =1     64     ; IP
  00BC           =1     65     PS      BIT     0BCH
****ERROR:Tryingtooverwriteconstant:ps
  00BB           =1     66     PT1     BIT     0BBH
****ERROR:Tryingtooverwriteconstant:pt1
  00BA           =1     67     PX1     BIT     0BAH
****ERROR:Tryingtooverwriteconstant:px1
  00B9           =1     68     PT0     BIT     0B9H
****ERROR:Tryingtooverwriteconstant:pt0
  00B8           =1     69     PX0     BIT     0B8H
****ERROR:Tryingtooverwriteconstant:px0
                 =1     70     ; P3
  00B7           =1     71     RD      BIT     0B7H
****ERROR:Tryingtooverwriteconstant:rd
  00B6           =1     72     WR      BIT     0B6H
****ERROR:Tryingtooverwriteconstant:wr
  00B5           =1     73     T1      BIT     0B5H
****ERROR:Tryingtooverwriteconstant:t1
  00B4           =1     74     T0      BIT     0B4H
****ERROR:Tryingtooverwriteconstant:t0
  00B3           =1     75     INT1    BIT     0B3H
****ERROR:Tryingtooverwriteconstant:int1
  00B2           =1     76     INT0    BIT     0B2H
****ERROR:Tryingtooverwriteconstant:int0
  00B1           =1     77     TXD     BIT     0B1H
****ERROR:Tryingtooverwriteconstant:txd
  00B0           =1     78     RXD     BIT     0B0H
****ERROR:Tryingtooverwriteconstant:rxd
                 =1     79     ; SCON
  009F           =1     80     SM0     BIT     9FH
****ERROR:Tryingtooverwriteconstant:sm0
  009E           =1     81     SM1     BIT     9EH
****ERROR:Tryingtooverwriteconstant:sm1
  009D           =1     82     SM2     BIT     9DH
****ERROR:Tryingtooverwriteconstant:sm2
  009C           =1     83     REN     BIT     9CH
****ERROR:Tryingtooverwriteconstant:ren
  009B           =1     84     TB8     BIT     9BH
****ERROR:Tryingtooverwriteconstant:tb8
  009A           =1     85     RB8     BIT     9AH
****ERROR:Tryingtooverwriteconstant:rb8
  0099           =1     86     TI      BIT     99H
****ERROR:Tryingtooverwriteconstant:ti
  0098           =1     87     RI      BIT     98H
****ERROR:Tryingtooverwriteconstant:ri
                 =1     88
                 =1     89     ; 8052 Extensions
                 =1     90     ; IE
  00AD           =1     91     ET2     BIT     0ADH
****ERROR:Tryingtooverwriteconstant:et2
                 =1     92     ; IP
  00BD           =1     93     PT2     BIT     0BDH
****ERROR:Tryingtooverwriteconstant:pt2
                 =1     94     ; P1
  0091           =1     95     T2EX    BIT     91H
  0090           =1     96     T2      BIT     90H
                 =1     97     ; T2CON
  00CF           =1     98     TF2     BIT     0CFH
****ERROR:Tryingtooverwriteconstant:tf2
  00CE           =1     99     EXF2    BIT     0CEH
****ERROR:Tryingtooverwriteconstant:exf2
  00CD           =1    100     RCLK    BIT     0CDH
****ERROR:Tryingtooverwriteconstant:rclk
  00CC           =1    101     TCLK    BIT     0CCH
****ERROR:Tryingtooverwriteconstant:tclk
  00CB           =1    102     EXEN2   BIT     0CBH
****ERROR:Tryingtooverwriteconstant:exen2
  00CA           =1    103     TR2     BIT     0CAH
****ERROR:Tryingtooverwriteconstant:tr2
  00C9           =1    104     C_T2    BIT     0C9H
  00C8           =1    105     CP_RL2  BIT     0C8H
                 =1    106
                       107
                 =1    108     $include(LCD.asm)
                 =1    109     ;Definição das portas a serrem utilizadas pelo LCD
  0096           =1    110     lcd_ce    SET P1.6 ;Chip enabled
  0095           =1    111     lcd_reset SET P1.5 ;Reset
  0097           =1    112     lcd_dc    SET P1.7 ;Data Comando
  00B1           =1    113     lcd_clk   SET P3.1 ;Clock
  00B0           =1    114     lcd_din   SET P3.0 ;Data in
                 =1    115
                 =1    116     lcd_bus   SET R0 ;Posição a ser utilizada pelo LCD para acesso bit-a-bit
                 =1    117     lcd_X     SET R1 ;
                 =1    118     lcd_Y     SET R2 ;
                 =1    119
                 =1    120     ; O LCD utilizará o banco de registradores 2, segundo a seguinte especificação:
                 =1    121     ; R0 - Byte/comando a ser escrito no LCD
                 =1    122     ; R1 - Coordenada X da função LDC_XY
                 =1    123     ; R2 - Coordenada Y da função LCD_XY
                 =1    124
                 =1    125     ; R3 - Utilizado no LCD_CLEAR como contador (numero de linhas)
                 =1    126     ; R4 - Utilizado no LCD_CLEAR como contador (numero de colunas)
                 =1    127
                 =1    128     ; R5 - utilizado internamente como contador para o delay (pode-se utilizar o timer e se livrar desse
                 =1    129     ; R6 - utilizado internamente como contador para o delay (pode-se utilizar o timer e se livrar desse
                 =1    130     ; R7 - utilizado internamente como contador para o envio.
                 =1    131
                 =1    132     code ;ROTINA para inicialização do LCD, deve ser chamada por um CALL
****ERROR:Missingnameofconstanttodefine
                 =1    133     LCD_INIT:
                 =1    134         PUSH ACC ;Acumulador para pilha
                 =1    135         PUSH PSW ;Guardar a infromação do banco de registradores que está sendo utilizado
                 =1    136         SETB RS1
                 =1    137         CLR RS0
                 =1    138         SETB lcd_reset ;RESET
                 =1    139         SETB lcd_ce    ;Set Chip Enabled
                 =1    140         ;CLR lcd_reset
                 =1    141         LCALL BIG_DELAY
                 =1    142         ;SETB lcd_reset ;RESET
                 =1    143
                 =1    144         ;Rotina de inicialização
                 =1    145         MOV lcd_bus, #021h
                 =1    146         LCALL LCD_SEND_COMMAND
                 =1    147
                 =1    148         MOV lcd_bus, #0C2h
                 =1    149         LCALL LCD_SEND_COMMAND
                 =1    150
                 =1    151         MOV lcd_bus, #011h
                 =1    152         LCALL LCD_SEND_COMMAND
                 =1    153
                 =1    154         MOV lcd_bus, #020h
                 =1    155         LCALL LCD_SEND_COMMAND
                 =1    156
                 =1    157         MOV lcd_bus, #009h
                 =1    158         LCALL LCD_SEND_COMMAND
                 =1    159
                 =1    160         LCALL LCD_CLEAR
                 =1    161
                 =1    162         MOV lcd_bus, #008h
                 =1    163         LCALL LCD_SEND_COMMAND
                 =1    164
                 =1    165         MOV lcd_bus, #00Ch
                 =1    166         LCALL LCD_SEND_COMMAND
                 =1    167
                 =1    168         POP PSW
                 =1    169         POP ACC
                 =1    170         ret
                 =1    171
                 =1    172     code ;Desenha um byte na tela
****ERROR:Missingnameofconstanttodefine
                 =1    173     LCD_DRAW:
                 =1    174         LCALL LCD_SEND_DATA
                 =1    175         ret
                 =1    176
                 =1    177     code
****ERROR:Missingnameofconstanttodefine
                 =1    178     LCD_SEND_SERIAL_DATA: ;Dados vem na posição R0, R7 serve como contador (utiliza pag2)
                 =1    179         MOV R7, #008h
                 =1    180         MOV A, lcd_bus
                 =1    181         LCD_SEND_SERIAL_DATA_INTERNAL_LOOP:
                 =1    182             CLR lcd_clk ;Clock para nivel alto
                 =1    183             JB ACC.7, LCD_SEND_SERIAL_DATA_NOT_ZERO
                 =1    184                 CLR lcd_din
                 =1    185                 SJMP LCD_SERIAL_END_IF
                 =1    186             LCD_SEND_SERIAL_DATA_NOT_ZERO:
                 =1    187                 SETB lcd_din
                 =1    188             LCD_SERIAL_END_IF:
                 =1    189             SETB lcd_clk
                 =1    190             RL A
                 =1    191             DJNZ R7, LCD_SEND_SERIAL_DATA_INTERNAL_LOOP
                 =1    192         ret
                 =1    193
                 =1    194     code
****ERROR:Missingnameofconstanttodefine
                 =1    195     LCD_SEND_COMMAND:
                 =1    196     ; Registrador R0 deve conter o comando a ser enviado
                 =1    197         PUSH ACC ;Acumulador para pilha
                 =1    198         PUSH PSW ;Guardar a infromação do banco de registradores que está sendo utilizado
                 =1    199         SETB RS1
                 =1    200         CLR RS0
                 =1    201         CLR lcd_dc ;Modo comando
                 =1    202         CLR lcd_ce ;Ativa o display
                 =1    203         LCALL LCD_SEND_SERIAL_DATA
                 =1    204         SETB lcd_ce ;Desativa o display
                 =1    205         ;Volta os registradores PSW e ACC respectivamente
                 =1    206         POP PSW
                 =1    207         POP ACC
                 =1    208         ret
                 =1    209
                 =1    210     code
****ERROR:Missingnameofconstanttodefine
                 =1    211     LCD_SEND_DATA:
                 =1    212     ; Registrador R0 deve conter o dado a ser enviado
                 =1    213         PUSH ACC ;Acumulador para pilha
                 =1    214         PUSH PSW ;Guardar a infromação do banco de registradores que está sendo utilizado
                 =1    215         SETB RS1
                 =1    216         CLR RS0
                 =1    217         SETB lcd_dc ;Modo Dados
                 =1    218         CLR lcd_ce ;Ativa o display
                 =1    219         LCALL LCD_SEND_SERIAL_DATA
                 =1    220         SETB lcd_ce ;Ativa o display
                 =1    221         ;Volta os registradores PSW e ACC respectivamente
                 =1    222         POP PSW
                 =1    223         POP ACC
                 =1    224         ret
                 =1    225     code
****ERROR:Missingnameofconstanttodefine
                 =1    226     LCD_XY:
                 =1    227         PUSH ACC ;Acumulador para pilha
                 =1    228         PUSH PSW ;Guardar a infromação do banco de registradores que está sendo utilizado
                 =1    229         SETB RS1
                 =1    230         CLR RS0
                 =1    231         ;080h X R1
                 =1    232         ;040h Y R2
                 =1    233         ;Recalcular o valor de Y (R2)
                 =1    234         MOV A, lcd_Y
                 =1    235         ORL A, #040h ;Sem garantia que o valor seja válido
                 =1    236         MOV lcd_bus, A
                 =1    237         LCALL LCD_SEND_COMMAND
                 =1    238         ;Recalcular valor de X (R1)
                 =1    239         MOV A, lcd_X
                 =1    240         ORL A, #080h ;Sem garantia que o valor seja válido
                 =1    241         MOV lcd_bus, A
                 =1    242         LCALL LCD_SEND_COMMAND
                 =1    243         POP PSW
                 =1    244         POP ACC
                 =1    245         ret
                 =1    246
                 =1    247     code
****ERROR:Missingnameofconstanttodefine
                 =1    248     LCD_CLEAR:
                 =1    249         PUSH ACC
                 =1    250         PUSH PSW
                 =1    251         SETB RS1
                 =1    252         CLR RS0
                 =1    253         MOV lcd_X, #000h
                 =1    254         MOV lcd_Y, #000h
                 =1    255         ; 0-83 x 0-5
                 =1    256
                 =1    257         MOV R3, #006h
                 =1    258         LCD_CLEAR_INTERNAL_LOOP_LINE:
                 =1    259             MOV R2, #054h
                 =1    260             LCD_CLEAR_INTERNAL_LOOP_COLUMN:
                 =1    261                 MOV lcd_bus, #000h
                 =1    262                 LCALL LCD_SEND_DATA
                 =1    263                 DJNZ R2, LCD_CLEAR_INTERNAL_LOOP_COLUMN
                 =1    264                 DJNZ R3, LCD_CLEAR_INTERNAL_LOOP_LINE
                 =1    265         POP PSW
                 =1    266         POP ACC
                 =1    267         ret
                 =1    268
                 =1    269     code
****ERROR:Missingnameofconstanttodefine
                 =1    270     BIG_DELAY:
                 =1    271             MOV R5, #10d
                 =1    272         INIT_DELAY_3:
                 =1    273             MOV R6, #255d
                 =1    274         INIT_DELAY_2:
                 =1    275             MOV R7, #255d
                 =1    276         INIT_DELAY:
                 =1    277             DJNZ R7, INIT_DELAY
                 =1    278             DJNZ R6, INIT_DELAY_2
                 =1    279             DJNZ R5, INIT_DELAY_3
                 =1    280         ret
                 =1    281     $include(Random.asm)
                 =1    282     ;to use these pseudo-random number sequence generators, memory must be
                 =1    283     ;set aside to hold the last random number, which is used to generate the
                 =1    284     ;next one so that a randomly distributed (but predictable) sequence of
                 =1    285     ;number is generated.
                 =1    286
  0020           =1    287     rand8reg SET 0x20               ;one byte
  0021           =1    288     rand16reg SET 0x21              ;two bytes
                 =1    289
                 =1    290     ;generates an 8 bit pseudo-random number which is returned in Acc.
                 =1    291     ;one byte of memory must be available for rand8reg
                 =1    292
                 =1    293     code
****ERROR:Missingnameofconstanttodefine
                 =1    294     RAND8:
                 =1    295         mov a, rand8reg
                 =1    296             jnz     rand8b
                 =1    297             cpl     a
                 =1    298             mov     rand8reg, a
                 =1    299     rand8b:
                 =1    300         anl a, #10111000b
                 =1    301             mov     c, p
                 =1    302             mov     a, rand8reg
                 =1    303             rlc     a
                 =1    304             mov     rand8reg, a
                 =1    305             ret
                 =1    306
                 =1    307     ;generates a 16 bit pseudo-random number which is returned in Acc (lsb) & B (msb)
                 =1    308     ;two bytes of memory must be available for rand16reg
                 =1    309     code
****ERROR:Missingnameofconstanttodefine
                 =1    310     RAND16:
                 =1    311         mov a, rand16reg
                 =1    312             jnz     rand16b
                 =1    313             mov     a, rand16reg+1
                 =1    314             jnz     rand16b
                 =1    315             cpl     a
                 =1    316             mov     rand16reg, a
                 =1    317             mov     rand16reg+1, a
                 =1    318     rand16b:
                 =1    319         anl a, #11010000b
                 =1    320             mov     c, p
                 =1    321             mov     a, rand16reg
                 =1    322             jnb     acc.3, rand16c
                 =1    323             cpl     c
                 =1    324     rand16c:
                 =1    325         rlc a
                 =1    326             mov     rand16reg, a
                 =1    327             mov     b, a
                 =1    328             mov     a, rand16reg+1
                 =1    329             rlc     a
                 =1    330             mov     rand16reg+1, a
                 =1    331             xch     a, b
                 =1    332             ret
                 =1    333
                       334     ;Podemos dividir o códgigo de cada um em um asm separado, para evitar problema
                       335     ;com nomenclatura sugiro termos esses arquivos pré-definidos.
                 =1    336     $include (tetris.asm)
                 =1    337     ;Posição da peça na tela (Canto superior esquerdo da mesma).
  0023           =1    338     fmg_piece_x SET 0x23
  0024           =1    339     fmg_piece_y SET 0x24
                 =1    340     ;Representar as peças por 3 bytes, onde os 2 primeiros são o endereço da peça na memória, e o terceir
                 =1    341     ;seria o valor atual da peça em função da rotação.
  0025           =1    342     fmg_piece_id_0 SET 0x25
  0026           =1    343     fmg_piece_id_1 SET 0x26
  0027           =1    344     fmg_piece_id_2 SET 0x27 ; Cada peça na memória possui na posição 0 a quantidade de rotações que a mes
  0028           =1    345     fmg_piece_id_3 SET 0x28
  0029           =1    346     fmg_piece_id_4 SET 0x29
                 =1    347     ;Posição de memória base para a grade
  0040           =1    348     fmg_grid SET 0x40
                 =1    349
                 =1    350     code
****ERROR:Missingnameofconstanttodefine
                 =1    351         ;Fonte numérica 3x5
00F9 1F111F091F  =1    352         FMG_NUMBERS_FONT: DB 01Fh, 011h, 01Fh, 009h, 01Fh, 001h, 009h, 013h, 01Dh, 011h, 015h, 00Ah, 01Ch
     0109131D11
     150A1C041F
     1C15121F15
     171017181F
     151F1C141F
                 =1    353
                 =1    354         ;Cada peça é definida por um par de bytes onde os bits mais significativos representam
                 =1    355         ;a coluna impares(3 e 1), e os menos significativos representam as colunas pares (2 e 0)
                 =1    356         ;As peças são centralziadas, quando não for possível serão alinhadas a esquerda e abaixo.
                 =1    357         ;Ordem das peças:
                 =1    358         ;  I, O, S, Z, L, J, T
                 =1    359         ;  I:  1  2
                 =1    360         ;  O:  3
                 =1    361         ;  S:  4  5
                 =1    362         ;  Z:  6  7
                 =1    363         ;  L:  8  9 10 11
                 =1    364         ;  J: 12 13 14 15
                 =1    365         ;  T: 16 17 18 19
                 =1    366         code
****ERROR:Missingnameofconstanttodefine
0117 020F002222  =1    367         FMG_PIECES_I: DB 002h, 00Fh, 000h, 022h, 022h
                 =1    368         code
****ERROR:Missingnameofconstanttodefine
011C 010660      =1    369         FMG_PIECES_O: DB 001h, 006h, 060h
                 =1    370         code
****ERROR:Missingnameofconstanttodefine
011F 0226400630  =1    371         FMG_PIECES_S: DB 002h, 026h, 040h, 006h, 030h
                 =1    372         code
****ERROR:Missingnameofconstanttodefine
0124 0246200360  =1    373         FMG_PIECES_Z: DB 002h, 046h, 020h, 003h, 060h
                 =1    374         code
****ERROR:Missingnameofconstanttodefine
0129 040E200644  =1    375         FMG_PIECES_L: DB 004h, 00Eh, 020h, 006h, 044h, 008h, 0E0h, 022h, 060h
     08E02260
                 =1    376         code
****ERROR:Missingnameofconstanttodefine
0132 0402E06220  =1    377         FMG_PIECES_J: DB 004h, 002h, 0E0h, 062h, 020h, 00Eh, 080h, 044h, 060h
     0E804460
                 =1    378         code
****ERROR:Missingnameofconstanttodefine
013B 0426200720  =1    379         FMG_PIECES_T: DB 004h, 026h, 020h, 007h, 020h, 023h, 020h, 002h, 070h
     23200270
                 =1    380
                 =1    381     ; A grade será todo o espaço localizado na posição de memória definido entre X e Y (25 posições),
                 =1    382     ; representado da seguinte maneira:
                 =1    383     ; X00L X00H X01L X01H X02L X02H X03L X03H X04L X04H
                 =1    384     ; X05H X06H X07H X08H X09H X10H X11H X12H X13H X14H
                 =1    385     ; X05L X06L X07L X08L X09L X10L X11L X12L X13L X14L
                 =1    386     ; X15H X16H X17H X18H X19H X20H X21H X22H X23H X24H
                 =1    387     ; X15L X16L X17L X18L X19L X20L X21L X22L X23L X24L
                 =1    388     ; XNNH significa os 4 bits mais significativos do byte NN no vetor X (posição de memória base).
                 =1    389     ; XNNL significa os 4 bits menos significativos do byte NN no vetor X (posição de memória base).
                 =1    390
                 =1    391     code
****ERROR:Missingnameofconstanttodefine
                 =1    392     ;Main tetris
                 =1    393     code
****ERROR:Missingnameofconstanttodefine
                 =1    394     FMG_TETRIS_MAIN:
                 =1    395         LCALL LCD_CLEAR
                 =1    396
                 =1    397         ;Inicialiação de um novo jogo!
                 =1    398         LCALL FMG_CLEAR_MEMORY ;Limpar memória
                 =1    399         LCALL FMG_DRAW_BORDER  ;Desenhar borda do tabuleiro
                 =1    400         LCALL FMG_DRAW_SCREEN  ;Desenhar estado do tabuleiro
                 =1    401
                 =1    402         ;Selecionar próxima peça
                 =1    403         LCALL FMG_SELECT_NEW_PIECE ;Selecionar nova peça
                 =1    404         ;Loop de um jogo corrente.
                 =1    405         ret
                 =1    406
                 =1    407     code
****ERROR:Missingnameofconstanttodefine
                 =1    408     FMG_SELECT_NEW_PIECE:
                 =1    409         LCALL RAND8
                 =1    410         MOV B, #007h
                 =1    411         DIV AB; Capturando apenas as 8 possiveis peças (temos 7 peças portanto um dos valores sera descon
                 =1    412         MOV A, B
                 =1    413         MOV DPTR, #FMG_SELECT_PIECE_SWITCH
                 =1    414         JMP @A+DPTR
                 =1    415         FMG_SELECT_PIECE_SWITCH:
                 =1    416             JMP FMG_SELECT_PIECE_I
                 =1    417             JMP FMG_SELECT_PIECE_O
****ERROR:Symbolnotdefined:fmg_select_piece_o
                 =1    418             JMP FMG_SELECT_PIECE_S
****ERROR:Symbolnotdefined:fmg_select_piece_s
                 =1    419             JMP FMG_SELECT_PIECE_Z
****ERROR:Symbolnotdefined:fmg_select_piece_z
                 =1    420             JMP FMG_SELECT_PIECE_L
****ERROR:Symbolnotdefined:fmg_select_piece_l
                 =1    421             JMP FMG_SELECT_PIECE_J
****ERROR:Symbolnotdefined:fmg_select_piece_j
                 =1    422             JMP FMG_SELECT_PIECE_T
****ERROR:Symbolnotdefined:fmg_select_piece_t
                 =1    423         FMG_SELECT_PIECE_I:
                 =1    424             ;Escolher qual vai ser a peça
                 =1    425
                 =1    426             LCALL RAND8
                 =1    427             MOV B, #002h
                 =1    428             DIV AB
                 =1    429             MOV A, B ; Escolhido a rotação
                 =1    430             MOV fmg_piece_id_2, A ;Coloca a posição da peça rotacionada no id 2
                 =1    431
                 =1    432             MOV B, #002h
                 =1    433             MUL AB ; Multiplico por 2 para ir para a peça correta
                 =1    434             ADD A, #001h ;Soma 1 já que o primeiro valor contem a quantidade de rotações da peça
                 =1    435
                 =1    436             ;Coloca em id 0 e 1 qual a peça selecionada
                 =1    437             MOV DPTR, #FMG_PIECES_I
                 =1    438             MOV fmg_piece_id_0, DPL
                 =1    439             MOV fmg_piece_id_1, DPH
                 =1    440             MOV fmg_piece_id_3, @A+DPTR ;Representação da peça (primeiros bytes)
****ERROR:Invalidsetofoperands:movfmg_piece_id_3,@A+DPTR
                 =1    441             MOV A, #001h
                 =1    442             MOV fmg_piece_id_4, @A+DPTR ;Representação da peça (segundos bytes)
****ERROR:Invalidsetofoperands:movfmg_piece_id_4,@A+DPTR
                 =1    443             ret
                 =1    444
                 =1    445     code
****ERROR:Missingnameofconstanttodefine
                 =1    446     FMG_CLEAR_MEMORY:
                 =1    447         MOV R1, #024h
                 =1    448         MOV R0, fmg_grid
                 =1    449         FMG_CLEAR_MEMORY_LOOP:
                 =1    450             MOV @R0, #000h
                 =1    451             MOV A, R0
                 =1    452             ADD A, #001h
                 =1    453             MOV R0, A
                 =1    454             DJNZ R1, FMG_CLEAR_MEMORY_LOOP
                 =1    455         ret
                 =1    456
                 =1    457     ;Desenha o grade na tela
                 =1    458     code
****ERROR:Missingnameofconstanttodefine
                 =1    459     FMG_DRAW_SCREEN:
                 =1    460         ;Desenhar na tela significa pegar os bytes definidos no grade e passar para a tela, lembrando que
                 =1    461         PUSH PSW
                 =1    462         SETB RS1
                 =1    463         CLR RS0
                 =1    464         MOV lcd_X, #021h
                 =1    465         MOV lcd_Y, #000h
                 =1    466         LCALL LCD_XY
                 =1    467         MOV R4, #005h
                 =1    468         MOV R3, #fmg_grid
                 =1    469         FMG_LOOP_LINHA_SUPERIOR:
                 =1    470             MOV A, R3; Move o conteúdo de R1 para o acumulador
                 =1    471             MOV R1, A
                 =1    472             MOV ACC, @R1
                 =1    473
                 =1    474             MOV C, ACC.3
                 =1    475             MOV ACC.7, C
                 =1    476             MOV ACC.6, C
                 =1    477             MOV C, ACC.2
                 =1    478             MOV ACC.5, C
                 =1    479             MOV ACC.4, C
                 =1    480             MOV C, ACC.1
                 =1    481             MOV ACC.3, C
                 =1    482             MOV ACC.2, C
                 =1    483             MOV C, ACC.0
                 =1    484             MOV ACC.1, C
                 =1    485
                 =1    486             MOV lcd_bus, ACC; primeiro draw
                 =1    487             LCALL LCD_DRAW
                 =1    488             MOV lcd_bus, ACC; segundo draw
                 =1    489             LCALL LCD_DRAW
                 =1    490
                 =1    491             MOV A, R3; Move o conteúdo de R1 para o acumulador
                 =1    492             MOV R1, A
                 =1    493             MOV ACC, @R1
                 =1    494
                 =1    495             MOV C, ACC.4
                 =1    496             MOV ACC.0, C
                 =1    497             MOV ACC.1, C
                 =1    498             MOV C, ACC.5
                 =1    499             MOV ACC.2, C
                 =1    500             MOV ACC.3, C
                 =1    501             MOV C, ACC.6
                 =1    502             MOV ACC.4, C
                 =1    503             MOV ACC.5, C
                 =1    504             MOV C, ACC.7
                 =1    505             MOV ACC.6, C
                 =1    506
                 =1    507             MOV lcd_bus, ACC; primeiro draw
                 =1    508             LCALL LCD_DRAW
                 =1    509             MOV lcd_bus, ACC; segundo draw
                 =1    510             LCALL LCD_DRAW
                 =1    511
                 =1    512             MOV A, R3
                 =1    513             ADD A, #001h
                 =1    514             MOV R3, A
                 =1    515             DJNZ R4, FMG_LOOP_LINHA_SUPERIOR
                 =1    516         ; Mover o ponteiro do LCD para o local desejado, para cada coluna desenhar a mesma 2 vezes.
                 =1    517         MOV lcd_X, #021h
                 =1    518         MOV lcd_Y, #001h
                 =1    519         LCALL LCD_XY
                 =1    520         MOV R6, #002h
                 =1    521         MOV lcd_Y, #001h
                 =1    522         FMG_LOOP_LINHA_3:
                 =1    523         MOV R4, #00Ah
                 =1    524         MOV R5, #021h
                 =1    525         FMG_LOOP_LINHA_2:
                 =1    526             MOV A, R5
                 =1    527             MOV lcd_X, A
                 =1    528             ;MOV lcd_Y, A
                 =1    529             LCALL LCD_XY
                 =1    530
                 =1    531             MOV A, R3; Move o conteúdo de R1 para o acumulador
                 =1    532             MOV R1, A
                 =1    533             MOV ACC, @R1
                 =1    534
                 =1    535             MOV C, ACC.3
                 =1    536             MOV ACC.7, C
                 =1    537             MOV ACC.6, C
                 =1    538             MOV C, ACC.2
                 =1    539             MOV ACC.5, C
                 =1    540             MOV ACC.4, C
                 =1    541             MOV C, ACC.1
                 =1    542             MOV ACC.3, C
                 =1    543             MOV ACC.2, C
                 =1    544             MOV C, ACC.0
                 =1    545             MOV ACC.1, C
                 =1    546
                 =1    547             MOV lcd_bus, ACC; primeiro draw
                 =1    548             LCALL LCD_DRAW
                 =1    549
                 =1    550             MOV lcd_bus, ACC; segundo draw
                 =1    551             LCALL LCD_DRAW
                 =1    552
                 =1    553             MOV A, R5
                 =1    554             MOV lcd_X, A
                 =1    555
                 =1    556             MOV A, lcd_Y
                 =1    557             ADD A, #001h
                 =1    558             MOV lcd_Y, A
                 =1    559             LCALL LCD_XY
                 =1    560
                 =1    561             MOV A, R3; Move o conteúdo de R1 para o acumulador
                 =1    562             MOV R1, A
                 =1    563             MOV ACC, @R1
                 =1    564
                 =1    565             MOV C, ACC.4
                 =1    566             MOV ACC.0, C
                 =1    567             MOV ACC.1, C
                 =1    568             MOV C, ACC.5
                 =1    569             MOV ACC.2, C
                 =1    570             MOV ACC.3, C
                 =1    571             MOV C, ACC.6
                 =1    572             MOV ACC.4, C
                 =1    573             MOV ACC.5, C
                 =1    574             MOV C, ACC.7
                 =1    575             MOV ACC.6, C
                 =1    576
                 =1    577             MOV lcd_bus, ACC; primeiro draw
                 =1    578             LCALL LCD_DRAW
                 =1    579             MOV lcd_bus, ACC; segundo draw
                 =1    580             LCALL LCD_DRAW
                 =1    581
                 =1    582             MOV A, R3
                 =1    583             ADD A, #001h
                 =1    584             MOV R3, A
                 =1    585
                 =1    586             MOV A, R5
                 =1    587             ADD A, #002h
                 =1    588             MOV R5, A
                 =1    589
                 =1    590             MOV A, lcd_Y
                 =1    591             SUBB A, #001h
                 =1    592             MOV lcd_Y, A
                 =1    593
                 =1    594             DJNZ R4, FMG_LOOP_LINHA_2
                 =1    595             MOV lcd_Y, #003h
                 =1    596             DJNZ R6, FMG_LOOP_LINHA_3
                 =1    597             POP PSW
                 =1    598         ret
                 =1    599
                 =1    600     code
****ERROR:Missingnameofconstanttodefine
                 =1    601     FMG_DRAW_BORDER:
                 =1    602         PUSH PSW
                 =1    603         SETB RS1
                 =1    604         CLR RS0
                 =1    605
                 =1    606         MOV lcd_X, #020h
                 =1    607         MOV lcd_Y, #000h
                 =1    608         LCALL LCD_XY
                 =1    609
                 =1    610         MOV R3, #005h
                 =1    611         FMG_DRAW_BORDER_LOOP_EXTERNAL:
                 =1    612             MOV R4, #016h
                 =1    613             FMG_DRAW_BORDER_LOOP:
                 =1    614                 MOV lcd_bus, #0FFh
                 =1    615                 LCALL LCD_DRAW
                 =1    616                 DJNZ R4, FMG_DRAW_BORDER_LOOP
                 =1    617             MOV lcd_X, #020h
                 =1    618             MOV A, lcd_Y
                 =1    619             ADD A, #001h
                 =1    620             MOV lcd_y, A
                 =1    621             LCALL LCD_XY
                 =1    622         DJNZ R3, FMG_DRAW_BORDER_LOOP_EXTERNAL
                 =1    623
                 =1    624         MOV lcd_X, #020h
                 =1    625         MOV lcd_Y, #005h
                 =1    626         LCALL LCD_XY
                 =1    627
                 =1    628         MOV R3, #016h
                 =1    629         FMG_DRAW_BORDER_LOOP_BOTTOM:
                 =1    630             MOV lcd_bus, #001h
                 =1    631             LCALL LCD_DRAW
                 =1    632             DJNZ R3, FMG_DRAW_BORDER_LOOP_BOTTOM
                 =1    633         POP PSW
                 =1    634         ret
                       635
                       636     code at 0
****ERROR:Missingnameofconstanttodefine
                       637         ljmp INIT
                       638
                       639     code at 3 ;Interrupção de timer
****ERROR:Missingnameofconstanttodefine
                       640
                       641     code
****ERROR:Missingnameofconstanttodefine
                       642     INIT: ;Inicialização das interrupções, do display e do que mais for necessário
                       643         MOV SP, #60h ; Move o stack pointer para o endereço 60h
                       644         LCALL TIMER_INIT
                       645         LCALL LCD_INIT
                       646         LJMP MAIN
                       647
                       648     code ;ROTINA para inicialização do Timer, de ser chamado por um CALL
****ERROR:Missingnameofconstanttodefine
                       649     TIMER_INIT:
                       650         ret;
                       651
                       652     code ;ROTINA para tratamento da interrupção do timer0
****ERROR:Missingnameofconstanttodefine
                       653     TIMER0_INTERRUPT:
                       654         PUSH ACC ;Acumulador para pilha
                       655         PUSH PSW ;Guardar a infromação do banco de registradores que está sendo utilizado
                       656         ;Utilizar página 1 para interrupção do timer 1 (timer do jogo)
                       657         SETB RS0
                       658         CLR RS1
                       659
                       660         ;Volta os registradores PSW e ACC respectivamente
                       661         POP PSW
                       662         POP ACC
                       663         ret;
                       664
                       665     code ;Entrada principal onde será exibido o código de menu para seleção do jogo
****ERROR:Missingnameofconstanttodefine
                       666     MAIN:
                       667         ;Banco 2
                       668         SETB RS1
                       669         CLR RS0
                       670         MOV R1, #001h
                       671         MOV R2, #001h
                       672
                       673
                       674         MOV lcd_X, #000h
                       675         MOV lcd_Y, #000h
                       676         LCALL LCD_XY
                       677
                       678         ;MAIN_LOOP:
                       679          ;   LCALL rand8
                       680          ;   MOV lcd_bus, A
                       681          ;   LCALL LCD_DRAW
                       682          ;   SJMP MAIN_LOOP
                       683     ;LOOP_MAIN:
                       684         ;MOV A, #01010101b
                       685         ;LCALL LCD_XY
                       686         ;MOV lcd_bus, A
                       687         ;LCALL LCD_DRAW
                       688         ;SJMP LOOP_MAIN
                       689         LCALL FMG_TETRIS_MAIN
                       690     END
ASSEMBLY COMPLETE, NO ERRORS FOUND, 114 WARNINGS


ERROR SUMMARY:
Line 8, ERROR:Tryingtooverwriteconstant:p0
Line 10, ERROR:Tryingtooverwriteconstant:p1
Line 12, ERROR:Tryingtooverwriteconstant:p2
Line 14, ERROR:Tryingtooverwriteconstant:p3
Line 16, ERROR:Tryingtooverwriteconstant:psw
Line 18, ERROR:Tryingtooverwriteconstant:acc
Line 20, ERROR:Tryingtooverwriteconstant:b
Line 22, ERROR:Tryingtooverwriteconstant:sp
Line 24, ERROR:Tryingtooverwriteconstant:dpl
Line 26, ERROR:Tryingtooverwriteconstant:dph
Line 28, ERROR:Tryingtooverwriteconstant:pcon
Line 30, ERROR:Tryingtooverwriteconstant:tcon
Line 32, ERROR:Tryingtooverwriteconstant:tmod
Line 34, ERROR:Tryingtooverwriteconstant:tl0
Line 36, ERROR:Tryingtooverwriteconstant:tl1
Line 38, ERROR:Tryingtooverwriteconstant:th0
Line 40, ERROR:Tryingtooverwriteconstant:th1
Line 42, ERROR:Tryingtooverwriteconstant:ie
Line 44, ERROR:Tryingtooverwriteconstant:ip
Line 46, ERROR:Tryingtooverwriteconstant:scon
Line 48, ERROR:Tryingtooverwriteconstant:sbuf
Line 52, ERROR:Tryingtooverwriteconstant:t2con
Line 54, ERROR:Tryingtooverwriteconstant:rcap2l
Line 56, ERROR:Tryingtooverwriteconstant:rcap2h
Line 58, ERROR:Tryingtooverwriteconstant:tl2
Line 60, ERROR:Tryingtooverwriteconstant:th2
Line 66, ERROR:Tryingtooverwriteconstant:cy
Line 68, ERROR:Tryingtooverwriteconstant:ac
Line 70, ERROR:Tryingtooverwriteconstant:f0
Line 72, ERROR:Tryingtooverwriteconstant:rs1
Line 74, ERROR:Tryingtooverwriteconstant:rs0
Line 76, ERROR:Tryingtooverwriteconstant:ov
Line 79, ERROR:Tryingtooverwriteconstant:p
Line 82, ERROR:Tryingtooverwriteconstant:tf1
Line 84, ERROR:Tryingtooverwriteconstant:tr1
Line 86, ERROR:Tryingtooverwriteconstant:tf0
Line 88, ERROR:Tryingtooverwriteconstant:tr0
Line 90, ERROR:Tryingtooverwriteconstant:ie1
Line 92, ERROR:Tryingtooverwriteconstant:it1
Line 94, ERROR:Tryingtooverwriteconstant:ie0
Line 96, ERROR:Tryingtooverwriteconstant:it0
Line 99, ERROR:Tryingtooverwriteconstant:ea
Line 101, ERROR:Tryingtooverwriteconstant:es
Line 103, ERROR:Tryingtooverwriteconstant:et1
Line 105, ERROR:Tryingtooverwriteconstant:ex1
Line 107, ERROR:Tryingtooverwriteconstant:et0
Line 109, ERROR:Tryingtooverwriteconstant:ex0
Line 112, ERROR:Tryingtooverwriteconstant:ps
Line 114, ERROR:Tryingtooverwriteconstant:pt1
Line 116, ERROR:Tryingtooverwriteconstant:px1
Line 118, ERROR:Tryingtooverwriteconstant:pt0
Line 120, ERROR:Tryingtooverwriteconstant:px0
Line 123, ERROR:Tryingtooverwriteconstant:rd
Line 125, ERROR:Tryingtooverwriteconstant:wr
Line 127, ERROR:Tryingtooverwriteconstant:t1
Line 129, ERROR:Tryingtooverwriteconstant:t0
Line 131, ERROR:Tryingtooverwriteconstant:int1
Line 133, ERROR:Tryingtooverwriteconstant:int0
Line 135, ERROR:Tryingtooverwriteconstant:txd
Line 137, ERROR:Tryingtooverwriteconstant:rxd
Line 140, ERROR:Tryingtooverwriteconstant:sm0
Line 142, ERROR:Tryingtooverwriteconstant:sm1
Line 144, ERROR:Tryingtooverwriteconstant:sm2
Line 146, ERROR:Tryingtooverwriteconstant:ren
Line 148, ERROR:Tryingtooverwriteconstant:tb8
Line 150, ERROR:Tryingtooverwriteconstant:rb8
Line 152, ERROR:Tryingtooverwriteconstant:ti
Line 154, ERROR:Tryingtooverwriteconstant:ri
Line 159, ERROR:Tryingtooverwriteconstant:et2
Line 162, ERROR:Tryingtooverwriteconstant:pt2
Line 168, ERROR:Tryingtooverwriteconstant:tf2
Line 170, ERROR:Tryingtooverwriteconstant:exf2
Line 172, ERROR:Tryingtooverwriteconstant:rclk
Line 174, ERROR:Tryingtooverwriteconstant:tclk
Line 176, ERROR:Tryingtooverwriteconstant:exen2
Line 178, ERROR:Tryingtooverwriteconstant:tr2
Line 208, ERROR:Missingnameofconstanttodefine
Line 249, ERROR:Missingnameofconstanttodefine
Line 255, ERROR:Missingnameofconstanttodefine
Line 273, ERROR:Missingnameofconstanttodefine
Line 290, ERROR:Missingnameofconstanttodefine
Line 306, ERROR:Missingnameofconstanttodefine
Line 329, ERROR:Missingnameofconstanttodefine
Line 352, ERROR:Missingnameofconstanttodefine
Line 377, ERROR:Missingnameofconstanttodefine
Line 394, ERROR:Missingnameofconstanttodefine
Line 436, ERROR:Missingnameofconstanttodefine
Line 453, ERROR:Missingnameofconstanttodefine
Line 456, ERROR:Missingnameofconstanttodefine
Line 459, ERROR:Missingnameofconstanttodefine
Line 462, ERROR:Missingnameofconstanttodefine
Line 465, ERROR:Missingnameofconstanttodefine
Line 468, ERROR:Missingnameofconstanttodefine
Line 471, ERROR:Missingnameofconstanttodefine
Line 485, ERROR:Missingnameofconstanttodefine
Line 488, ERROR:Missingnameofconstanttodefine
Line 503, ERROR:Missingnameofconstanttodefine
Line 514, ERROR:Symbolnotdefined:fmg_select_piece_o
Line 516, ERROR:Symbolnotdefined:fmg_select_piece_s
Line 518, ERROR:Symbolnotdefined:fmg_select_piece_z
Line 520, ERROR:Symbolnotdefined:fmg_select_piece_l
Line 522, ERROR:Symbolnotdefined:fmg_select_piece_j
Line 524, ERROR:Symbolnotdefined:fmg_select_piece_t
Line 543, ERROR:Invalidsetofoperands:movfmg_piece_id_3,@A+DPTR
Line 546, ERROR:Invalidsetofoperands:movfmg_piece_id_4,@A+DPTR
Line 550, ERROR:Missingnameofconstanttodefine
Line 564, ERROR:Missingnameofconstanttodefine
Line 707, ERROR:Missingnameofconstanttodefine
Line 744, ERROR:Missingnameofconstanttodefine
Line 748, ERROR:Missingnameofconstanttodefine
Line 751, ERROR:Missingnameofconstanttodefine
Line 759, ERROR:Missingnameofconstanttodefine
Line 764, ERROR:Missingnameofconstanttodefine
Line 778, ERROR:Missingnameofconstanttodefine

SYMBOL TABLE:
??MCU_8051_IDE . . . . . . . . . . .  N  NUMB  8051H  NOT USED
??VERSION. . . . . . . . . . . . . .  N  NUMB  0149H  NOT USED
AC . . . . . . . . . . . . . . . . .  B  ADDR  00D6H  NOT USED
ACC. . . . . . . . . . . . . . . . .  D  ADDR  00E0H
ACSR . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
ADCF . . . . . . . . . . . . . . . .  D  ADDR  00F6H  NOT USED
ADCLK. . . . . . . . . . . . . . . .  D  ADDR  00F2H  NOT USED
ADCON. . . . . . . . . . . . . . . .  D  ADDR  00F3H  NOT USED
ADDH . . . . . . . . . . . . . . . .  D  ADDR  00F5H  NOT USED
ADDL . . . . . . . . . . . . . . . .  D  ADDR  00F4H  NOT USED
AUXR . . . . . . . . . . . . . . . .  D  ADDR  008EH  NOT USED
AUXR1. . . . . . . . . . . . . . . .  D  ADDR  00A2H  NOT USED
B. . . . . . . . . . . . . . . . . .  D  ADDR  00F0H
BDRCON . . . . . . . . . . . . . . .  D  ADDR  009BH  NOT USED
BDRCON_1 . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
BIG_DELAY. . . . . . . . . . . . . .  C  ADDR  00B7H
BRL. . . . . . . . . . . . . . . . .  D  ADDR  009AH  NOT USED
CCAP0H . . . . . . . . . . . . . . .  D  ADDR  00FAH  NOT USED
CCAP0L . . . . . . . . . . . . . . .  D  ADDR  00EAH  NOT USED
CCAP1H . . . . . . . . . . . . . . .  D  ADDR  00FBH  NOT USED
CCAP1L . . . . . . . . . . . . . . .  D  ADDR  00EBH  NOT USED
CCAP2H . . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAP3H . . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAP4H . . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL2H. . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAPL2L. . . . . . . . . . . . . . .  D  ADDR  00ECH  NOT USED
CCAPL3H. . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAPL3L. . . . . . . . . . . . . . .  D  ADDR  00EDH  NOT USED
CCAPL4H. . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL4L. . . . . . . . . . . . . . .  D  ADDR  00EEH  NOT USED
CCAPM0 . . . . . . . . . . . . . . .  D  ADDR  00DAH  NOT USED
CCAPM1 . . . . . . . . . . . . . . .  D  ADDR  00DBH  NOT USED
CCAPM2 . . . . . . . . . . . . . . .  D  ADDR  00DCH  NOT USED
CCAPM3 . . . . . . . . . . . . . . .  D  ADDR  00DDH  NOT USED
CCAPM4 . . . . . . . . . . . . . . .  D  ADDR  00DEH  NOT USED
CCF0 . . . . . . . . . . . . . . . .  B  ADDR  00D8H  NOT USED
CCF1 . . . . . . . . . . . . . . . .  B  ADDR  00D9H  NOT USED
CCF2 . . . . . . . . . . . . . . . .  B  ADDR  00DAH  NOT USED
CCF3 . . . . . . . . . . . . . . . .  B  ADDR  00DBH  NOT USED
CCF4 . . . . . . . . . . . . . . . .  B  ADDR  00DCH  NOT USED
CCON . . . . . . . . . . . . . . . .  D  ADDR  00D8H  NOT USED
CFINT. . . . . . . . . . . . . . . .  C  ADDR  0033H  NOT USED
CH . . . . . . . . . . . . . . . . .  D  ADDR  00F9H  NOT USED
CKCON. . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKCON0 . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKRL . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
CKSEL. . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
CL . . . . . . . . . . . . . . . . .  D  ADDR  00E9H  NOT USED
CLKREG . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CMOD . . . . . . . . . . . . . . . .  D  ADDR  00D9H  NOT USED
CPRL2. . . . . . . . . . . . . . . .  B  ADDR  00C8H  NOT USED
CP_RL2 . . . . . . . . . . . . . . .  B  ADDR  00C8H  NOT USED
CR . . . . . . . . . . . . . . . . .  B  ADDR  00DEH  NOT USED
CT2. . . . . . . . . . . . . . . . .  B  ADDR  00C9H  NOT USED
CY . . . . . . . . . . . . . . . . .  B  ADDR  00D7H  NOT USED
C_T2 . . . . . . . . . . . . . . . .  B  ADDR  00C9H  NOT USED
DP0H . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DP0L . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
DP1H . . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
DP1L . . . . . . . . . . . . . . . .  D  ADDR  0084H  NOT USED
DPH. . . . . . . . . . . . . . . . .  D  ADDR  0083H
DPL. . . . . . . . . . . . . . . . .  D  ADDR  0082H
EA . . . . . . . . . . . . . . . . .  B  ADDR  00AFH  NOT USED
EC . . . . . . . . . . . . . . . . .  B  ADDR  00AEH  NOT USED
EECON. . . . . . . . . . . . . . . .  D  ADDR  0096H  NOT USED
ES . . . . . . . . . . . . . . . . .  B  ADDR  00ACH  NOT USED
ET0. . . . . . . . . . . . . . . . .  B  ADDR  00A9H  NOT USED
ET1. . . . . . . . . . . . . . . . .  B  ADDR  00ABH  NOT USED
ET2. . . . . . . . . . . . . . . . .  B  ADDR  00ADH  NOT USED
EX0. . . . . . . . . . . . . . . . .  B  ADDR  00A8H  NOT USED
EX1. . . . . . . . . . . . . . . . .  B  ADDR  00AAH  NOT USED
EXEN2. . . . . . . . . . . . . . . .  B  ADDR  00CBH  NOT USED
EXF2 . . . . . . . . . . . . . . . .  B  ADDR  00CEH  NOT USED
EXTI0. . . . . . . . . . . . . . . .  C  ADDR  0003H  NOT USED
EXTI1. . . . . . . . . . . . . . . .  C  ADDR  0013H  NOT USED
F0 . . . . . . . . . . . . . . . . .  B  ADDR  00D5H  NOT USED
F1 . . . . . . . . . . . . . . . . .  B  ADDR  00D1H  NOT USED
FE . . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
FMG_CLEAR_MEMORY . . . . . . . . . .  C  ADDR  0193H
FMG_CLEAR_MEMORY_LOOP. . . . . . . .  C  ADDR  0197H
FMG_DRAW_BORDER. . . . . . . . . . .  C  ADDR  0279H
FMG_DRAW_BORDER_LOOP . . . . . . . .  C  ADDR  028AH
FMG_DRAW_BORDER_LOOP_BOTTOM. . . . .  C  ADDR  02A5H
FMG_DRAW_BORDER_LOOP_EXTERNAL. . . .  C  ADDR  0288H
FMG_DRAW_SCREEN. . . . . . . . . . .  C  ADDR  01A0H
FMG_GRID . . . . . . . . . . . . . .     NUMB  0040H            REDEFINABLE
FMG_LOOP_LINHA_2 . . . . . . . . . .  C  ADDR  020EH
FMG_LOOP_LINHA_3 . . . . . . . . . .  C  ADDR  020AH
FMG_LOOP_LINHA_SUPERIOR. . . . . . .  C  ADDR  01B1H
FMG_NUMBERS_FONT . . . . . . . . . .  C  ADDR  00F9H  NOT USED
FMG_PIECES_I . . . . . . . . . . . .  C  ADDR  0117H
FMG_PIECES_J . . . . . . . . . . . .  C  ADDR  0132H  NOT USED
FMG_PIECES_L . . . . . . . . . . . .  C  ADDR  0129H  NOT USED
FMG_PIECES_O . . . . . . . . . . . .  C  ADDR  011CH  NOT USED
FMG_PIECES_S . . . . . . . . . . . .  C  ADDR  011FH  NOT USED
FMG_PIECES_T . . . . . . . . . . . .  C  ADDR  013BH  NOT USED
FMG_PIECES_Z . . . . . . . . . . . .  C  ADDR  0124H  NOT USED
FMG_PIECE_ID_0 . . . . . . . . . . .     NUMB  0025H            REDEFINABLE
FMG_PIECE_ID_1 . . . . . . . . . . .     NUMB  0026H            REDEFINABLE
FMG_PIECE_ID_2 . . . . . . . . . . .     NUMB  0027H            REDEFINABLE
FMG_PIECE_ID_3 . . . . . . . . . . .     NUMB  0028H  NOT USED  REDEFINABLE
FMG_PIECE_ID_4 . . . . . . . . . . .     NUMB  0029H  NOT USED  REDEFINABLE
FMG_PIECE_X. . . . . . . . . . . . .     NUMB  0023H  NOT USED  REDEFINABLE
FMG_PIECE_Y. . . . . . . . . . . . .     NUMB  0024H  NOT USED  REDEFINABLE
FMG_SELECT_NEW_PIECE . . . . . . . .  C  ADDR  0154H
FMG_SELECT_PIECE_I . . . . . . . . .  C  ADDR  0176H
FMG_SELECT_PIECE_SWITCH. . . . . . .  C  ADDR  0161H
FMG_TETRIS_MAIN. . . . . . . . . . .  C  ADDR  0144H
IE . . . . . . . . . . . . . . . . .  D  ADDR  00A8H  NOT USED
IE0. . . . . . . . . . . . . . . . .  B  ADDR  0089H  NOT USED
IE1. . . . . . . . . . . . . . . . .  B  ADDR  008BH  NOT USED
INIT . . . . . . . . . . . . . . . .  C  ADDR  02B2H
INIT_DELAY . . . . . . . . . . . . .  C  ADDR  00BDH
INIT_DELAY_2 . . . . . . . . . . . .  C  ADDR  00BBH
INIT_DELAY_3 . . . . . . . . . . . .  C  ADDR  00B9H
INT0 . . . . . . . . . . . . . . . .  B  ADDR  00B2H  NOT USED
INT1 . . . . . . . . . . . . . . . .  B  ADDR  00B3H  NOT USED
IP . . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPH. . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH0 . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH1 . . . . . . . . . . . . . . . .  D  ADDR  00B3H  NOT USED
IPL0 . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPL1 . . . . . . . . . . . . . . . .  D  ADDR  00B2H  NOT USED
IT0. . . . . . . . . . . . . . . . .  B  ADDR  0088H  NOT USED
IT1. . . . . . . . . . . . . . . . .  B  ADDR  008AH  NOT USED
KBE. . . . . . . . . . . . . . . . .  D  ADDR  009DH  NOT USED
KBF. . . . . . . . . . . . . . . . .  D  ADDR  009EH  NOT USED
KBLS . . . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
LCD_BUS. . . . . . . . . . . . . . .  S  SPEC  R0               REDEFINABLE
LCD_CE . . . . . . . . . . . . . . .     NUMB  0096H            REDEFINABLE
LCD_CLEAR. . . . . . . . . . . . . .  C  ADDR  0099H
LCD_CLEAR_INTERNAL_LOOP_COLUMN . . .  C  ADDR  00A9H
LCD_CLEAR_INTERNAL_LOOP_LINE . . . .  C  ADDR  00A7H
LCD_CLK. . . . . . . . . . . . . . .     NUMB  00B1H            REDEFINABLE
LCD_DC . . . . . . . . . . . . . . .     NUMB  0097H            REDEFINABLE
LCD_DIN. . . . . . . . . . . . . . .     NUMB  00B0H            REDEFINABLE
LCD_DRAW . . . . . . . . . . . . . .  C  ADDR  003AH
LCD_INIT . . . . . . . . . . . . . .  C  ADDR  0000H
LCD_RESET. . . . . . . . . . . . . .     NUMB  0095H            REDEFINABLE
LCD_SEND_COMMAND . . . . . . . . . .  C  ADDR  0052H
LCD_SEND_DATA. . . . . . . . . . . .  C  ADDR  0068H
LCD_SEND_SERIAL_DATA . . . . . . . .  C  ADDR  003EH
LCD_SEND_SERIAL_DATA_INTERNAL_LOOP .  C  ADDR  0041H
LCD_SEND_SERIAL_DATA_NOT_ZERO. . . .  C  ADDR  004AH
LCD_SERIAL_END_IF. . . . . . . . . .  C  ADDR  004CH
LCD_X. . . . . . . . . . . . . . . .  S  SPEC  R1               REDEFINABLE
LCD_XY . . . . . . . . . . . . . . .  C  ADDR  007EH
LCD_Y. . . . . . . . . . . . . . . .  S  SPEC  R2               REDEFINABLE
MAIN . . . . . . . . . . . . . . . .  C  ADDR  02CCH
OSCCON . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
OV . . . . . . . . . . . . . . . . .  B  ADDR  00D2H  NOT USED
P. . . . . . . . . . . . . . . . . .  B  ADDR  00D0H
P0 . . . . . . . . . . . . . . . . .  D  ADDR  0080H  NOT USED
P1 . . . . . . . . . . . . . . . . .  D  ADDR  0090H  NOT USED
P1M1 . . . . . . . . . . . . . . . .  D  ADDR  00D4H  NOT USED
P1M2 . . . . . . . . . . . . . . . .  D  ADDR  00E2H  NOT USED
P2 . . . . . . . . . . . . . . . . .  D  ADDR  00A0H  NOT USED
P3 . . . . . . . . . . . . . . . . .  D  ADDR  00B0H  NOT USED
P3M1 . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
P3M2 . . . . . . . . . . . . . . . .  D  ADDR  00E3H  NOT USED
P4 . . . . . . . . . . . . . . . . .  D  ADDR  00C0H  NOT USED
P4M1 . . . . . . . . . . . . . . . .  D  ADDR  00D6H  NOT USED
P4M2 . . . . . . . . . . . . . . . .  D  ADDR  00E4H  NOT USED
P5 . . . . . . . . . . . . . . . . .  D  ADDR  00E8H  NOT USED
PC . . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PCON . . . . . . . . . . . . . . . .  D  ADDR  0087H  NOT USED
PPCL . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PS . . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSL. . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSW. . . . . . . . . . . . . . . . .  D  ADDR  00D0H
PT0. . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT0L . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT1. . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT1L . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT2. . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PT2L . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PX0. . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX0L . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX1. . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
PX1L . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
RAND16 . . . . . . . . . . . . . . .  C  ADDR  00D5H  NOT USED
RAND16B. . . . . . . . . . . . . . .  C  ADDR  00E2H
RAND16C. . . . . . . . . . . . . . .  C  ADDR  00ECH
RAND16REG. . . . . . . . . . . . . .     NUMB  0021H            REDEFINABLE
RAND8. . . . . . . . . . . . . . . .  C  ADDR  00C4H
RAND8B . . . . . . . . . . . . . . .  C  ADDR  00CBH
RAND8REG . . . . . . . . . . . . . .     NUMB  0020H            REDEFINABLE
RB8. . . . . . . . . . . . . . . . .  B  ADDR  009AH  NOT USED
RCAP2H . . . . . . . . . . . . . . .  D  ADDR  00CBH  NOT USED
RCAP2L . . . . . . . . . . . . . . .  D  ADDR  00CAH  NOT USED
RCLK . . . . . . . . . . . . . . . .  B  ADDR  00CDH  NOT USED
RD . . . . . . . . . . . . . . . . .  B  ADDR  00B7H  NOT USED
REN. . . . . . . . . . . . . . . . .  B  ADDR  009CH  NOT USED
RESET. . . . . . . . . . . . . . . .  C  ADDR  0000H  NOT USED
RI . . . . . . . . . . . . . . . . .  B  ADDR  0098H  NOT USED
RS0. . . . . . . . . . . . . . . . .  B  ADDR  00D3H
RS1. . . . . . . . . . . . . . . . .  B  ADDR  00D4H
RXD. . . . . . . . . . . . . . . . .  B  ADDR  00B0H  NOT USED
SADDR. . . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_0. . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_1. . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SADEN. . . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_0. . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_1. . . . . . . . . . . . . . .  D  ADDR  00BAH  NOT USED
SBUF . . . . . . . . . . . . . . . .  D  ADDR  0099H  NOT USED
SCON . . . . . . . . . . . . . . . .  D  ADDR  0098H  NOT USED
SINT . . . . . . . . . . . . . . . .  C  ADDR  0023H  NOT USED
SM0. . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
SM1. . . . . . . . . . . . . . . . .  B  ADDR  009EH  NOT USED
SM2. . . . . . . . . . . . . . . . .  B  ADDR  009DH  NOT USED
SP . . . . . . . . . . . . . . . . .  D  ADDR  0081H
SPCON. . . . . . . . . . . . . . . .  D  ADDR  00C3H  NOT USED
SPCR . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
SPDAT. . . . . . . . . . . . . . . .  D  ADDR  00C5H  NOT USED
SPDR . . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
SPSR . . . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SPSTA. . . . . . . . . . . . . . . .  D  ADDR  00C4H  NOT USED
T0 . . . . . . . . . . . . . . . . .  B  ADDR  00B4H  NOT USED
T1 . . . . . . . . . . . . . . . . .  B  ADDR  00B5H  NOT USED
T2 . . . . . . . . . . . . . . . . .  B  ADDR  0090H  NOT USED
T2CON. . . . . . . . . . . . . . . .  D  ADDR  00C8H  NOT USED
T2EX . . . . . . . . . . . . . . . .  B  ADDR  0091H  NOT USED
T2MOD. . . . . . . . . . . . . . . .  D  ADDR  00C9H  NOT USED
TB8. . . . . . . . . . . . . . . . .  B  ADDR  009BH  NOT USED
TCLK . . . . . . . . . . . . . . . .  B  ADDR  00CCH  NOT USED
TCON . . . . . . . . . . . . . . . .  D  ADDR  0088H  NOT USED
TF0. . . . . . . . . . . . . . . . .  B  ADDR  008DH  NOT USED
TF1. . . . . . . . . . . . . . . . .  B  ADDR  008FH  NOT USED
TF2. . . . . . . . . . . . . . . . .  B  ADDR  00CFH  NOT USED
TH0. . . . . . . . . . . . . . . . .  D  ADDR  008CH  NOT USED
TH1. . . . . . . . . . . . . . . . .  D  ADDR  008DH  NOT USED
TH2. . . . . . . . . . . . . . . . .  D  ADDR  00CDH  NOT USED
TI . . . . . . . . . . . . . . . . .  B  ADDR  0099H  NOT USED
TIMER0 . . . . . . . . . . . . . . .  C  ADDR  000BH  NOT USED
TIMER0_INTERRUPT . . . . . . . . . .  C  ADDR  02BFH  NOT USED
TIMER1 . . . . . . . . . . . . . . .  C  ADDR  001BH  NOT USED
TIMER2 . . . . . . . . . . . . . . .  C  ADDR  002BH  NOT USED
TIMER_INIT . . . . . . . . . . . . .  C  ADDR  02BEH
TL0. . . . . . . . . . . . . . . . .  D  ADDR  008AH  NOT USED
TL1. . . . . . . . . . . . . . . . .  D  ADDR  008BH  NOT USED
TL2. . . . . . . . . . . . . . . . .  D  ADDR  00CCH  NOT USED
TMOD . . . . . . . . . . . . . . . .  D  ADDR  0089H  NOT USED
TR0. . . . . . . . . . . . . . . . .  B  ADDR  008CH  NOT USED
TR1. . . . . . . . . . . . . . . . .  B  ADDR  008EH  NOT USED
TR2. . . . . . . . . . . . . . . . .  B  ADDR  00CAH  NOT USED
TXD. . . . . . . . . . . . . . . . .  B  ADDR  00B1H  NOT USED
WDTCON . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTPRG . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTRST . . . . . . . . . . . . . . .  D  ADDR  00A6H  NOT USED
WR . . . . . . . . . . . . . . . . .  B  ADDR  00B6H  NOT USED