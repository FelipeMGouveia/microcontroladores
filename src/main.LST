MACRO ASSEMBLER MAIN                                       12/08/14 14:20:57 PAGE     1


DOS MACRO ASSEMBLER MA51 V06.16.13.326
OBJECT MODULE PLACED IN C:\PROJECTS\MICROCONTROLADORES\SRC\MAIN.OBJ
ASSEMBLER INVOKED BY: QUIET GENERATEDEPFILE EP SYNTAX(ASM51) PR XR PL(60) PW(80) DB OJ(C:\PROJECTS\MICROCONTROLADORES\SRC\MAIN.OBJ) PIN(C:\RAISONANCE\RIDE\INC;C:\RAISONANCE\RIDE\INC\51) 

LOC     OBJ           LINE    SOURCE
                         1     $INCLUDE(REG52.INC)
                       106     ;to use these pseudo-random number sequence generators, memory must be
                       107     ;set aside to hold the last random number, which is used to generate the
                       108     ;next one so that a randomly distributed (but predictable) sequence of
                       109     ;number is generated.
  0020                 110     RAND8REG SET 0X20		;one byte
  0021                 111     RAND16REG SET 0X21		;two bytes
                       112     ;generates an 8 bit pseudo-random number which is returned in Acc.
                       113     ;one byte of memory must be available for rand8reg
------                 114     CODE
                       115     RAND8: 	
0000    E520           116     MOV A , 32 
0002    7003           117     	JNZ	RAND8B
0004    F4             118     	CPL	A
0005    F520           119     MOV 32 , A 
                       120     	RAND8B: 	
0007    54B8           121         ANL	A, #10111000B
0009    A2D0           122     	MOV	C, P
000B    E520           123     MOV A , 32 
000D    33             124     	RLC	A
000E    F520           125     MOV 32 , A 
0010    22             126     	RET
                       127     	;generates a 16 bit pseudo-random number which is returned in Acc (lsb) & B (msb)
                       128     ;two bytes of memory must be available for rand16reg
------                 129     CODE
                       130     RAND16: 	
0011    E521           131     MOV A , 33 
0013    7009           132     	JNZ	RAND16B
0015    E522           133     MOV A , 33 + 1 
0017    7005           134     	JNZ	RAND16B
0019    F4             135     	CPL	A
001A    F521           136     MOV 33 , A 
001C    F522           137     MOV 33 + 1 , A 
                       138     	RAND16B: 
001E    54D0           139         ANL	A, #11010000B
0020    A2D0           140     	MOV	C, P
0022    E521           141     MOV A , 33 
0024    30E301         142     	JNB	ACC.3, RAND16C
0027    B3             143     	CPL	C
                       144     	RAND16C: 
0028    33             145         RLC	A
0029    F521           146     MOV 33 , A 
002B    F5F0           147     	MOV	B, A
002D    E522           148     MOV A , 33 + 1 
002F    33             149     	RLC	A
0030    F522           150     MOV 33 + 1 , A 
0032    C5F0           151     	XCH	A, B
0034    22             152     	RET
                       153     	
                       154     ;Defini��o das portas a serrem utilizadas pelo LCD
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE     2
                     
  0096                 155     LCD_CE    SET P1.6 ;Chip enabled
  0095                 156     LCD_RESET SET P1.5 ;Reset
  0097                 157     LCD_DC    SET P1.7 ;Data Comando
  00B1                 158     LCD_CLK   SET P3.1 ;Clock
  00B0                 159     LCD_DIN   SET P3.0 ;Data in
                       160     
  REG                  161     LCD_BUS   SET R0 ;Posi��o a ser utilizada pelo LCD para acesso bit-a-bit
  REG                  162     LCD_X     SET R1 ;
  REG                  163     LCD_Y     SET R2 ;
                       164     
                       165     ; O LCD utilizar� o banco de registradores 2, segundo a seguinte especifica��o:
                       166     ; R0 - Byte/comando a ser escrito no LCD
                       167     ; R1 - Coordenada X da fun��o LDC_XY
                       168     ; R2 - Coordenada Y da fun��o LCD_XY
                       169     
                       170     ; R3 - Utilizado no LCD_CLEAR como contador (numero de linhas)
                       171     ; R4 - Utilizado no LCD_CLEAR como contador (numero de colunas)
                       172     
                       173     ; R5 - utilizado internamente como contador para o delay (pode-se utilizar o timer e se livrar desse cara)
                       174     ; R6 - utilizado internamente como contador para o delay (pode-se utilizar o timer e se livrar desse cara)
                       175     ; R7 - utilizado internamente como contador para o envio.
                       176     
------                 177     CODE ;ROTINA para inicializa��o do LCD, deve ser chamada por um CALL
                       178     LCD_INIT: 
0035    C0E0           179         PUSH ACC ;Acumulador para pilha
0037    C0D0           180         PUSH PSW ;Guardar a infroma��o do banco de registradores que est� sendo utilizado
0039    D2D4           181         SETB RS1
003B    C2D3           182         CLR RS0
003D    D295           183     SETB 149 
003F    D296           184     SETB 150 
                       185         ;CLR lcd_reset
0041    120000   F     186         LCALL BIG_DELAY
                       187         ;SETB lcd_reset ;RESET
                       188         
                       189         ;Rotina de inicializa��o
0044    7821           190     MOV R0 , # 021H 
0046    120000   F     191         LCALL LCD_SEND_COMMAND
                       192         
0049    78C2           193     MOV R0 , # 0C2H 
004B    120000   F     194         LCALL LCD_SEND_COMMAND
                       195         
004E    7811           196     MOV R0 , # 011H 
0050    120000   F     197         LCALL LCD_SEND_COMMAND
                       198         
0053    7820           199     MOV R0 , # 020H 
0055    120000   F     200         LCALL LCD_SEND_COMMAND
                       201         
0058    7809           202     MOV R0 , # 009H 
005A    120000   F     203         LCALL LCD_SEND_COMMAND
                       204         
005D    120000   F     205         LCALL LCD_CLEAR
                       206         
0060    7808           207     MOV R0 , # 008H 
0062    120000   F     208         LCALL LCD_SEND_COMMAND
                       209         
0065    780C           210     MOV R0 , # 00CH 
0067    120000   F     211         LCALL LCD_SEND_COMMAND
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE     3
                     
                       212         
006A    D0D0           213         POP PSW
006C    D0E0           214         POP ACC
006E    22             215         RET
                       216     
------                 217     CODE ;Desenha um byte na tela
                       218     LCD_DRAW: 
006F    120000   F     219         LCALL LCD_SEND_DATA
0072    22             220         RET
                       221     
------                 222     CODE
                       223     LCD_SEND_SERIAL_DATA:  ;Dados vem na posi��o R0, R7 serve como contador (utiliza pag2)
0073    7F08           224         MOV R7, #008H 
0075    E8             225     MOV A , R0 
                       226         LCD_SEND_SERIAL_DATA_INTERNAL_LOOP: 
0076    C2B1           227     CLR 177 
0078    20E704         228             JB ACC.7, LCD_SEND_SERIAL_DATA_NOT_ZERO
007B    C2B0           229     CLR 176 
007D    8002           230                 SJMP LCD_SERIAL_END_IF
                       231             LCD_SEND_SERIAL_DATA_NOT_ZERO: 
007F    D2B0           232     SETB 176 
                       233             LCD_SERIAL_END_IF: 
0081    D2B1           234     SETB 177 
0083    23             235             RL A
0084    DFF0           236             DJNZ R7, LCD_SEND_SERIAL_DATA_INTERNAL_LOOP
0086    22             237         RET
                       238     
------                 239     CODE
                       240     LCD_SEND_COMMAND: 
                       241     ; Registrador R0 deve conter o comando a ser enviado
0087    C0E0           242         PUSH ACC ;Acumulador para pilha
0089    C0D0           243         PUSH PSW ;Guardar a infroma��o do banco de registradores que est� sendo utilizado
008B    D2D4           244         SETB RS1
008D    C2D3           245         CLR RS0
008F    C297           246     CLR 151 
0091    C296           247     CLR 150 
0093    120000   F     248         LCALL LCD_SEND_SERIAL_DATA
0096    D296           249     SETB 150 
                       250         ;Volta os registradores PSW e ACC respectivamente
0098    D0D0           251         POP PSW
009A    D0E0           252         POP ACC
009C    22             253         RET
                       254     
------                 255     CODE
                       256     LCD_SEND_DATA: 
                       257     ; Registrador R0 deve conter o dado a ser enviado
009D    C0E0           258         PUSH ACC ;Acumulador para pilha
009F    C0D0           259         PUSH PSW ;Guardar a infroma��o do banco de registradores que est� sendo utilizado
00A1    D2D4           260         SETB RS1
00A3    C2D3           261         CLR RS0
00A5    D297           262     SETB 151 
00A7    C296           263     CLR 150 
00A9    120000   F     264         LCALL LCD_SEND_SERIAL_DATA
00AC    D296           265     SETB 150 
                       266         ;Volta os registradores PSW e ACC respectivamente
00AE    D0D0           267         POP PSW
00B0    D0E0           268         POP ACC
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE     4
                     
00B2    22             269         RET
------                 270     CODE
                       271     LCD_XY: 
00B3    C0E0           272         PUSH ACC ;Acumulador para pilha
00B5    C0D0           273         PUSH PSW ;Guardar a infroma��o do banco de registradores que est� sendo utilizado
00B7    D2D4           274         SETB RS1
00B9    C2D3           275         CLR RS0
                       276         ;080h X R1
                       277         ;040h Y R2
                       278         ;Recalcular o valor de Y (R2)
00BB    EA             279     MOV A , R2 
00BC    4440           280         ORL A, #040H ;Sem garantia que o valor seja v�lido
00BE    F8             281     MOV R0 , A 
00BF    120000   F     282         LCALL LCD_SEND_COMMAND
                       283         ;Recalcular valor de X (R1)
00C2    E9             284     MOV A , R1 
00C3    4480           285         ORL A, #080H ;Sem garantia que o valor seja v�lido
00C5    F8             286     MOV R0 , A 
00C6    120000   F     287         LCALL LCD_SEND_COMMAND
00C9    D0D0           288         POP PSW
00CB    D0E0           289         POP ACC
00CD    22             290         RET
                       291     
------                 292     CODE
                       293     LCD_CLEAR: 
00CE    C0E0           294         PUSH ACC 
00D0    C0D0           295         PUSH PSW 
00D2    D2D4           296         SETB RS1
00D4    C2D3           297         CLR RS0
00D6    7900           298     MOV R1 , # 000H 
00D8    7A00           299     MOV R2 , # 000H 
                       300         ; 0-83 x 0-5
                       301         
00DA    7B06           302         MOV R3, #006H
                       303         LCD_CLEAR_INTERNAL_LOOP_LINE: 
00DC    7A54           304             MOV R2, #054H
                       305             LCD_CLEAR_INTERNAL_LOOP_COLUMN: 
00DE    7800           306     MOV R0 , # 000H 
00E0    120000   F     307                 LCALL LCD_SEND_DATA
00E3    DAF9           308                 DJNZ R2, LCD_CLEAR_INTERNAL_LOOP_COLUMN
00E5    DBF5           309                 DJNZ R3, LCD_CLEAR_INTERNAL_LOOP_LINE
00E7    D0D0           310         POP PSW
00E9    D0E0           311         POP ACC
00EB    22             312         RET
                       313     
------                 314     CODE
                       315     BIG_DELAY: 
00EC    7D0A           316             MOV R5, #10D
                       317         INIT_DELAY_3: 
00EE    7EFF           318             MOV R6, #255D
                       319         INIT_DELAY_2: 
00F0    7FFF           320             MOV R7, #255D
                       321         INIT_DELAY:     
00F2    DFFE           322             DJNZ R7, INIT_DELAY
00F4    DEFA           323             DJNZ R6, INIT_DELAY_2
00F6    DDF6           324             DJNZ R5, INIT_DELAY_3
00F8    22             325         RET
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE     5
                     
                       326     
                       327     ;Posi��o da pe�a na tela (Canto superior esquerdo da mesma).
  0023                 328     FMG_PIECE_X SET 023H
  0024                 329     FMG_PIECE_Y SET 024H ;Y(0) implica em -4 na tela, s� a partir de Y(4) que com certeza a pe�a estar� na tela
                       330     ;Representar as pe�as por 3 bytes, onde os 2 primeiros s�o o endere�o da pe�a na mem�ria, e o terceiro
                       331     ;seria o valor atual da pe�a em fun��o da rota��o.
                       332     
                       333     ;Informa��es com rela��o a pe�a que est� na espera.
  0025                 334     FMG_PIECE_ID_H SET 025H ;Ender�os da pe�a
  0026                 335     FMG_PIECE_ID_L SET 026H
  0027                 336     FMG_PIECE_ID_R SET 027H; Cada pe�a na mem�ria possui na posi��o 0 a quantidade de rota��es que a mesma possui
  0028                 337     FMG_PIECE_ID_0 SET 028H
  0029                 338     FMG_PIECE_ID_1 SET 029H
                       339     
                       340     ;Informa��es com rela��o a pe�a que est� em uso.
  002A                 341     FMG_PIECE_H SET 02AH
  002B                 342     FMG_PIECE_L SET 02BH
  002C                 343     FMG_PIECE_R SET 02CH
  002D                 344     FMG_PIECE_0 SET 02DH
  002E                 345     FMG_PIECE_1 SET 02EH
                       346     
  002F                 347     FMG_STATE SET 02FH ;Estado corrente do jogo
                       348         ;0 - Jogo em andamento
                       349         ;1 - Colis�o (Ocorreu uma colis�o, remover linhas, verificar se o jogo continua, sortear nova pe�a e continuar o jogo).
                       350         ;2 - Fim do jogo
  0030                 351     FMG_CONTROL SET 030H ; Estado de controles do jogo, deve ser utilizado para os bot�es
  0031                 352     FMG_CONTROL_OLD SET 031H ;Estado anterior, utilizado para n�o ter repeti��o de comandos
                       353         ;0  - Nada a fazer
                       354         ;1  - Mover para esquerda
                       355         ;2  - Mover para direita
                       356         ;3  - Rotacionar
                       357         ;4  - Cair
                       358     
  0032                 359     FMG_TIME_TO_FALL_0 SET 032H ;Tempo at� a pr�xima queda, menos significativo
  0033                 360     FMG_TIME_TO_FALL SET 033H ;Tempo que o fmg_time_to_fall_0 deve atingir para ocorrer a queda
                       361     
  0034                 362     FMG_SCORE_0 SET 034H ;Pontua��o inferior
  0035                 363     FMG_SCORE_1 SET 035H ;Pontua��o superior
                       364     
                       365     ;Posi��o de mem�ria base para a grade
  0040                 366     FMG_GRID SET 040H
                       367     
------                 368     CODE
                       369         ;Fonte num�rica 3x5
00F9    F888F890       370         FMG_NUMBERS_FONT:  DB 0F8H, 088H, 0F8H, 090H, 0F8H, 080H, 090H, 0C8H, 0B8H, 088H, 0A8H, 050H, 038H, 020H, 0F8H, 038H, 0A8H, 048H, 0F8H, 0A8H, 0D8H, 008H, 0D8H, 081H, 0F8H, 0A8H, 0F8H, 038H, 028H, 0F8H
00FD    F88090C8
0101    B888A850
0105    3820F838
0109    A848F8A8
010D    D808D881
0111    F8A8F838
0115    28F8
                       371     
                       372         ;Cada pe�a � definida por um par de bytes onde os bits mais significativos representam 
                       373         ;a coluna impares(3 e 1), e os menos significativos representam as colunas pares (2 e 0)
                       374         ;As pe�as s�o centralziadas, quando n�o for poss�vel ser�o alinhadas a esquerda e abaixo.
                       375         ;Ordem das pe�as:
                       376         ;  I, O, S, Z, L, J, T
                       377         ;  I:  1  2
                       378         ;  O:  3
                       379         ;  S:  4  5
                       380         ;  Z:  6  7
                       381         ;  L:  8  9 10 11
                       382         ;  J: 12 13 14 15
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE     6
                     
                       383         ;  T: 16 17 18 19
------                 384         CODE
0117    020F0022       385         FMG_PIECES_I:  DB 002H, 00FH, 000H, 022H, 022H
011B    22
------                 386         CODE
011C    010660         387         FMG_PIECES_O:  DB 001H, 006H, 060H
------                 388         CODE
011F    02264006       389         FMG_PIECES_S:  DB 002H, 026H, 040H, 006H, 030H
0123    30
------                 390         CODE
0124    02462003       391         FMG_PIECES_Z:  DB 002H, 046H, 020H, 003H, 060H
0128    60
------                 392         CODE
0129    040E2006       393         FMG_PIECES_L:  DB 004H, 00EH, 020H, 006H, 044H, 008H, 0E0H, 022H, 060H
012D    4408E022
0131    60
------                 394         CODE
0132    0402E062       395         FMG_PIECES_J:  DB 004H, 002H, 0E0H, 062H, 020H, 00EH, 080H, 044H, 060H
0136    200E8044
013A    60
------                 396         CODE
013B    04262007       397         FMG_PIECES_T:  DB 004H, 026H, 020H, 007H, 020H, 023H, 020H, 002H, 070H
013F    20232002
0143    70
                       398     
                       399     ; A grade ser� todo o espa�o localizado na posi��o de mem�ria definido entre X e Y (25 posi��es), 
                       400     ; representado da seguinte maneira: 
                       401     ; X00L X00H X01L X01H X02L X02H X03L X03H X04L X04H
                       402     ; X05H X06H X07H X08H X09H X10H X11H X12H X13H X14H
                       403     ; X05L X06L X07L X08L X09L X10L X11L X12L X13L X14L
                       404     ; X15H X16H X17H X18H X19H X20H X21H X22H X23H X24H
                       405     ; X15L X16L X17L X18L X19L X20L X21L X22L X23L X24L
                       406     ; XNNH significa os 4 bits mais significativos do byte NN no vetor X (posi��o de mem�ria base).
                       407     ; XNNL significa os 4 bits menos significativos do byte NN no vetor X (posi��o de mem�ria base).
                       408     
------                 409     CODE
                       410     FMG_TETRIS_MAIN: 
                       411         ;Configura��o do timer_0
0144    740F           412         MOV A, #00FH
0146    F533           413     MOV 51 , A 
0148    753400         414     MOV 52 , # 000H 
014B    753500         415     MOV 53 , # 000H 
                       416     
                       417         
014E    C2AF           418         CLR EA ;Desabilita interrup��o at� configurar o(s) timer(s)
0150    C28C           419         CLR TR0 ; Para o timer 0
                       420     
0152    758901         421         MOV TMOD, #001H
                       422         
0155    74DC           423         MOV A, #0DCH
0157    F58A           424         MOV TL0, A
                       425         
0159    7411           426         MOV A, #011H
015B    F58C           427         MOV TH0, A
                       428         
015D    D2A9           429         SETB ET0 ;Ativa a interrup��o do timer 0
015F    D28C           430         SETB TR0 ;Ativa o timer 0
0161    D2AF           431         SETB EA ;Ativa interrup��o
                       432         
0163    120000   F     433         LCALL LCD_CLEAR
                       434         
                       435         ;Inicialia��o de um novo jogo!    
0166    120000   F     436         LCALL FMG_CLEAR_MEMORY ;Limpar mem�ria
0169    120000   F     437         LCALL FMG_DRAW_BORDER  ;Desenhar borda do tabuleiro
016C    120000   F     438         LCALL FMG_DRAW_SCREEN  ;Desenhar estado do tabuleiro
                       439         
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE     7
                     
                       440         ;Selecionar pr�xima pe�a
016F    120000   F     441         LCALL FMG_SELECT_NEW_PIECE  ; Selecionar nova pe�a
0172    120000   F     442         LCALL FMG_FROM_WAIT_TO_GAME ; Coloca a pe�a da espera no jogo.
0175    120000   F     443         LCALL FMG_SELECT_NEW_PIECE  ; Seleciona a pe�a que ficar� na espera
                       444         
                       445         ;Move a pe�a para a posi��o central no topo
0178    752307         446     MOV 35 , # 007H 
017B    752400         447     MOV 36 , # 000H 
                       448         
017E    120000   F     449         LCALL FMG_DRAW_NEXT_PIECE ; Desenha a pe�a que est� na espera
                       450     
                       451         ;Loop de um jogo corrente.
                       452         ;LCALL FMG_UPDATE_STATE ; Atualiza o estado atual do jogo
                       453         ;LCALL FMG_DRAW_SCREEN ; Desenha o jogo atual
                       454         FMG_WAIT_ETERNAL: 
0181    120000   F     455             LCALL FMG_DRAW_NEXT_PIECE ; Desenha a pe�a que est� na espera
0184    120000   F     456             LCALL FMG_UPDATE_STATE ;Movimenta a pe�a atual.
0187    120000   F     457             LCALL FMG_VALIDATE_COLLISION ; Valida se ocorreu uma colis�o
                       458     
018A    120000   F     459             LCALL FMG_REMOVE_COMPLETE_LINES; Remove as linhas completas 
                       460             ;R7 Est� com a quantidade de linhas removidas
018D    120000   F     461             LCALL FMG_UPDATE_SCORE
                       462             
0190    120000   F     463             LCALL FMG_DRAW_SCORE
                       464             
0193    120000   F     465             LCALL FMG_TEST_END
0196    E52F           466     MOV A , 47 
0198    C3             467             CLR C
0199    9402           468             SUBB A, #002H
019B    6036           469             JZ FMG_END_GAME
                       470            
019D    AC23           471     MOV R4 , 35 
019F    AD24           472     MOV R5 , 36 
01A1    120000   F     473             LCALL FMG_GET_REGION
01A4    AA2D           474     MOV R2 , 45 
01A6    AB2E           475     MOV R3 , 46 
01A8    EA             476             MOV A, R2
01A9    6E             477             XRL A, R6
01AA    FE             478             MOV R6, A
                       479             
01AB    EB             480             MOV A, R3
01AC    6F             481             XRL A, R7
01AD    FF             482             MOV R7, A
01AE    AC23           483     MOV R4 , 35 
01B0    AD24           484     MOV R5 , 36 
01B2    120000   F     485             LCALL FMG_SET_REGION
                       486             
01B5    120000   F     487             LCALL FMG_DRAW_SCREEN
                       488             
01B8    AC23           489     MOV R4 , 35 
01BA    AD24           490     MOV R5 , 36 
01BC    120000   F     491             LCALL FMG_GET_REGION
01BF    AA2D           492     MOV R2 , 45 
01C1    AB2E           493     MOV R3 , 46 
01C3    EE             494             MOV A, R6
01C4    9A             495             SUBB A, R2
01C5    FE             496             MOV R6, A
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE     8
                     
                       497             
01C6    EF             498             MOV A, R7
01C7    9B             499             SUBB A, R3
01C8    FF             500             MOV R7, A
01C9    AC23           501     MOV R4 , 35 
01CB    AD24           502     MOV R5 , 36 
01CD    120000   F     503             LCALL FMG_SET_REGION
01D0    020000   F     504         LJMP FMG_WAIT_ETERNAL
                       505         
                       506         FMG_END_GAME: 
01D3    120000   F     507             LCALL FMG_DRAW_END
01D6    22             508         RET
------                 509     CODE 
                       510         FMG_UPDATE_STATE: 
                       511         ;Verificar no controle se tem alguma tecla prescionada
                       512         ;Caso tenha, fazer a rotina correspondente
01D7    E530           513     MOV A , 48 
01D9    8531F0         514     MOV B , 49 
                       515         ; Se controle for cair(normal), ent�o caia :D
01DC    F8             516         MOV R0, A; Guarda o controle em R0
01DD    A9F0           517         MOV R1, B; Guarda o controle antigo em R1
                       518         
01DF    99             519         SUBB A, R1 ; Se for 0 ent�o n�o ocorreu altera��o de controle
01E0    600D           520         JZ FMG_UPDATE_STATE_END_WORKAROUND
                       521         ;Atualiza o controle antigo para ser o valor atualmente em controle.
01E2    E530           522     MOV A , 48 
01E4    F531           523     MOV 49 , A 
01E6    E8             524         MOV A, R0 ;Caso contr�rio restaura fmg_control
                       525         
01E7    75F003         526         MOV B, #003H
01EA    A4             527         MUL AB
                       528         
01EB    900000   F     529         MOV DPTR, #FMG_UPDATE_STATE_SWITCH_CONTROL
01EE    73             530         JMP @A+DPTR
                       531         
                       532         FMG_UPDATE_STATE_END_WORKAROUND: 
01EF    020000   F     533             LJMP FMG_UPDATE_STATE_END
                       534             
                       535         FMG_UPDATE_STATE_SWITCH_CONTROL: 
01F2    020000   F     536             JMP FMG_UPDATE_STATE_SWITCH_STATE_NOTHING
01F5    020000   F     537             JMP FMG_UPDATE_STATE_SWITCH_STATE_LEFT
01F8    020000   F     538             JMP FMG_UPDATE_STATE_SWITCH_STATE_RIGHT
01FB    020000   F     539             JMP FMG_UPDATE_STATE_SWITCH_STATE_ROTATE
01FE    020000   F     540             JMP FMG_UPDATE_STATE_SWITCH_STATE_FALL
                       541         FMG_UPDATE_STATE_SWITCH_STATE_LEFT: 
                       542             ;Carrega a posi��o X e Y para R4 e R5
0201    E523           543     MOV A , 35 
0203    14             544     DEC A
0204    FC             545     MOV R4, A
0205    E524           546     MOV A , 36 
0207    FD             547     MOV R5, A
                       548     
                       549     ;Carrega a rota��o para R1
0208    E52C           550     MOV A , 44 
020A    F9             551     MOV R1, A
                       552     
                       553     FMG_UPDATE_STATE_LEFT: 
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE     9
                     
020B    120000   F     554         LCALL FMG_UPDATE_STATE_CHECK_COLLISION
020E    4002           555         JC FMG_UPDATE_STATE_LEFT_VALID; Posi��o v�lida
0210    5005           556         JNC FMG_UPDATE_STATE_LEFT_NOT_VALID; Posi��o inv�lida
                       557     FMG_UPDATE_STATE_LEFT_VALID: 
                       558         ;Rota��o v�lida
0212    E523           559     MOV A , 35 
0214    14             560         DEC A
0215    F523           561     MOV 35 , A 
                       562     FMG_UPDATE_STATE_LEFT_NOT_VALID: 
0217    020000   F     563         LJMP FMG_UPDATE_STATE_END
                       564         FMG_UPDATE_STATE_SWITCH_STATE_RIGHT: 
                       565             ;Carrega a posi��o X e Y para R4 e R5
021A    E523           566     MOV A , 35 
021C    04             567     INC A
021D    FC             568     MOV R4, A
021E    E524           569     MOV A , 36 
0220    FD             570     MOV R5, A
                       571     
                       572     ;Carrega a rota��o para R1
0221    E52C           573     MOV A , 44 
0223    F9             574     MOV R1, A
                       575     
                       576     FMG_UPDATE_STATE_RIGHT: 
0224    120000   F     577         LCALL FMG_UPDATE_STATE_CHECK_COLLISION
0227    4002           578         JC FMG_UPDATE_STATE_RIGHT_VALID; Posi��o v�lida
0229    5005           579         JNC FMG_UPDATE_STATE_RIGHT_NOT_VALID; Posi��o inv�lida
                       580     FMG_UPDATE_STATE_RIGHT_VALID: 
                       581         ;Rota��o v�lida
022B    E523           582     MOV A , 35 
022D    04             583         INC A
022E    F523           584     MOV 35 , A 
                       585     FMG_UPDATE_STATE_RIGHT_NOT_VALID: 
0230    020000   F     586         LJMP FMG_UPDATE_STATE_END
                       587         FMG_UPDATE_STATE_SWITCH_STATE_ROTATE: 
                       588             ; Rotaciona a pe�a para a esquerda e testa se a rota��o � poss�vel, em caso afirmativo, rotaciona a mesma.
                       589     ; Rotacionar a pe�a para esquerda:
                       590     ; Subtrair 1 do contador de posi��o atual em R1 (se maior que zero, sen�o colocar para o valor m�ixmo)
                       591     ; Carregar a nova pe�a nos registradores R2 e R3
                       592     ; fmg_piece_H,L,R,0,1
                       593     ;Rotacionando
0233    E523           594     MOV A , 35 
0235    FC             595     MOV R4, A
0236    E524           596     MOV A , 36 
0238    FD             597     MOV R5, A
0239    E52C           598     MOV A , 44 
023B    700E           599     JNZ FMG_UPDATE_STATE_LEFT_NOT_ZERO 
                       600         ; IF(A == 0) Rotacionar para o m�ximo (A - 1 por ser 0 based)
                       601         ; ELSE R1 = A - 1
                       602     ;Atualiza��o para o caso de ser zero
023D    852A83         603     MOV DPH , 42 
0240    852B82         604     MOV DPL , 43 
0243    7400           605     MOV A, #000H
0245    93             606     MOVC A, @A+DPTR
0246    14             607     DEC A; Zero based
0247    F9             608     MOV R1, A
0248    020000   F     609     JMP FMG_UPDATE_STATE_ROTATION_LEFT
                       610     FMG_UPDATE_STATE_LEFT_NOT_ZERO:  ; Atualiza para o caso de n�o ser zero
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    10
                     
024B    14             611     DEC A
024C    F9             612     MOV R1, A
                       613     
                       614     FMG_UPDATE_STATE_ROTATION_LEFT: 
024D    120000   F     615         LCALL FMG_UPDATE_STATE_CHECK_COLLISION
0250    4002           616         JC FMG_UPDATE_STATE_ROTATION_LEFT_VALID; Posi��o v�lida
0252    501B           617         JNC FMG_UPDATE_STATE_ROTATION_LEFT_NOT_VALID; Posi��o inv�lida
                       618     FMG_UPDATE_STATE_ROTATION_LEFT_VALID: 
                       619         ;Rota��o v�lida
0254    E9             620         MOV A, R1
0255    F52C           621     MOV 44 , A 
0257    852A83         622     MOV DPH , 42 
025A    852B82         623     MOV DPL , 43 
                       624         
025D    E52C           625     MOV A , 44 
025F    75F002         626         MOV B, #002H
0262    A4             627         MUL AB
0263    2401           628         ADD A, #001H
0265    F9             629         MOV R1, A
                       630         ;Coloca em id 0 e 1 qual a pe�a selecionada
0266    93             631         MOVC A, @A+DPTR ;Representa��o da pe�a (primeiros bytes)
0267    F52D           632     MOV 45 , A 
0269    E9             633         MOV A, R1
026A    2401           634         ADD A, #001H ;Representa��o da pe�a (segundos bytes)
026C    93             635         MOVC A, @A+DPTR
026D    F52E           636     MOV 46 , A 
                       637         
                       638     FMG_UPDATE_STATE_ROTATION_LEFT_NOT_VALID: 
026F    020000   F     639         LJMP FMG_UPDATE_STATE_END
                       640         
                       641     ;;;;;;;;;;;;;;;;;;;;;;;;;;
                       642     ;; ROTACAO PARA DIREITA ;;
                       643     ;;;;;;;;;;;;;;;;;;;;;;;;;;
                       644     
                       645     ; Rotaciona a pe�a para a direita e testa se a rota��o � poss�vel, em caso afirmativo, rotaciona a mesma.
                       646     ; Rotacionar a pe�a para direita:
                       647     ; Adiciona 1 do contador de posi��o atual em R1 (se menor que m�ximo, sen�o colocar para zero)
                       648     ; Carregar a nova pe�a nos registradores R2 e R3
                       649     ; fmg_piece_H,L,R,0,1
                       650     
                       651     ;Rotacionando
                       652     ;MOV A, fmg_piece_x
                       653     ;MOV R4, A
                       654     ;MOV A, fmg_piece_y
                       655     ;MOV R5, A
                       656     ;MOV DPH, fmg_piece_H
                       657     ;MOV DPL, fmg_piece_L
                       658     ;MOV A, #000h
                       659     ;MOVC A, @A+DPTR;  ;Rota��o m�xima
                       660     ;MOV R0, A ; Rota��o m�xima est� em R0
                       661     ;MOV A, fmg_piece_R ; Carrega a rota��o atual para A
                       662     ;ADD A, #001h ;Rotaciona A
                       663     ;
                       664     ;MOV B, A
                       665     ;SUBB A, R0 ; Verifica se R0 � igual a A
                       666     ;JNZ FMG_UPDATE_STATE_RIGHT_NOT_MAX ;Se A == B, ent�o resete A, sen�o continue
                       667     ;    ;IF (A == B) R1 = 0 
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    11
                     
                       668     ;    ;ELSE R1 = A
                       669     ;    MOV R1, #000h ; Coloca 0 em R1.
                       670     ;    JMP FMG_UPDATE_STATE_ROTATION_RIGHT
                       671     ;
                       672     ;    FMG_UPDATE_STATE_RIGHT_NOT_MAX:
                       673     ;    MOV A, B
                       674     ;    MOV R1, A; Coloca a nova rota��o em R1.
                       675     ;
                       676     ;FMG_UPDATE_STATE_ROTATION_RIGHT:
                       677     ;    LCALL FMG_UPDATE_STATE_CHECK_COLLISION
                       678     ;    JC FMG_UPDATE_STATE_ROTATION_RIGHT_VALID; Posi��o v�lida
                       679     ;    JNC FMG_UPDATE_STATE_ROTATION_RIGHT_NOT_VALID; Posi��o inv�lida
                       680     ;FMG_UPDATE_STATE_ROTATION_RIGHT_VALID:
                       681     ;    ;Rota��o v�lida
                       682     ;    MOV A, R1
                       683     ;    MOV fmg_piece_R, A; Atualiza a rota��o
                       684     ;FMG_UPDATE_STATE_ROTATION_RIGHT_NOT_VALID:
                       685     ;    LJMP FMG_UPDATE_STATE_END
                       686         FMG_UPDATE_STATE_SWITCH_STATE_FALL: 
                       687             ;Carrega a posi��o X e Y para R4 e R5
0272    E523           688     MOV A , 35 
0274    FC             689     MOV R4, A
0275    E524           690     MOV A , 36 
0277    2401           691     ADD A, #001H ;Cair!!!
0279    FD             692     MOV R5, A
                       693     
                       694     ;Carrega a rota��o para R1
027A    E52C           695     MOV A , 44 
027C    F9             696     MOV R1, A
                       697     
                       698     FMG_UPDATE_STATE_FALL: 
027D    120000   F     699         LCALL FMG_UPDATE_STATE_CHECK_COLLISION
0280    4002           700         JC FMG_UPDATE_STATE_FALL_VALID; Posi��o v�lida
0282    5009           701         JNC FMG_UPDATE_STATE_FALL_NOT_VALID; Posi��o inv�lida
                       702     FMG_UPDATE_STATE_FALL_VALID: 
                       703         ;Queda v�lida
0284    E524           704     MOV A , 36 
0286    2401           705         ADD A, #001H ;Cair!!!
0288    F524           706     MOV 36 , A 
028A    020000   F     707         LJMP FMG_UPDATE_STATE_END
                       708     FMG_UPDATE_STATE_FALL_NOT_VALID: 
028D    752F01         709     MOV 47 , # 001H 
0290    020000   F     710         LJMP FMG_UPDATE_STATE_END
                       711         FMG_UPDATE_STATE_SWITCH_STATE_NOTHING:  ; N�o faz nada
                       712         FMG_UPDATE_STATE_END:  ;Fim do fluxo de atualiza��o de estado
0293    22             713         RET
------                 714     CODE
                       715         ;GETa os valores de uma determinada regi�o da mem�ria
                       716         ; R4 contem a posi��o x,
                       717         ; R5 contem a posi��o y
                       718         ; R6 contem a regi�o ser desenhada (esquerda)
                       719         ; R7 contem a regi�o ser desenhada (direita)
                       720         
                       721         FMG_GET_REGION: 
0294    E8             722         MOV A, R0
0295    C0E0           723         PUSH ACC
0297    E9             724         MOV A, R1
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    12
                     
0298    C0E0           725         PUSH ACC
029A    EA             726         MOV A, R2
029B    C0E0           727         PUSH ACC
029D    EB             728         MOV A, R3
029E    C0E0           729         PUSH ACC
                       730         
02A0    ED             731         MOV A, R5
02A1    C0E0           732         PUSH ACC
02A3    7A04           733         MOV R2, #004H
                       734         FMG_GET_REGION_LOOP_X: 
02A5    D0E0           735             POP ACC
02A7    ADE0           736             MOV R5, ACC
02A9    C0E0           737             PUSH ACC
02AB    7B04           738             MOV R3, #004H
                       739             FMG_GET_REGION_LOOP_Y: 
                       740                 ;C�lculo do byte
02AD    ED             741                 MOV A, R5
02AE    75F008         742                 MOV B, #008H
02B1    84             743                 DIV AB
02B2    A9F0           744                 MOV R1, B 
02B4    09             745                 INC R1; R1 contem o bit que quero modificar (+1 por causa do 0 based)
                       746                 
02B5    75F012         747                 MOV B, #012H ; Byte = 18 * A + R4
02B8    A4             748                 MUL AB
02B9    2C             749                 ADD A, R4
02BA    F8             750                 MOV R0, A 
02BB    7440           751     MOV A , # 64 
02BD    28             752                 ADD A, R0
02BE    F8             753                 MOV R0, A ; R0 contem a posi��o do byte que estou querendo
                       754                 
                       755                 ;Definir se R6 ou R7 e ent�o chamar o FMG_FIND_BIT
02BF    EA             756                 MOV A, R2
02C0    14             757                 DEC A
02C1    75F002         758                 MOV B, #002H
02C4    84             759                 DIV AB
                       760     
02C5    75F003         761                 MOV B, #003H
02C8    A4             762                 MUL AB
02C9    900000   F     763                 MOV DPTR, #FMG_GET_REGION_SWITCH_1_R6_R7
02CC    73             764                 JMP @A+DPTR
                       765                 FMG_GET_REGION_SWITCH_1_R6_R7: 
02CD    020000   F     766                     JMP FMG_GET_REGION_SWITCH_1_R7 ;Como o contador est� invertido temos o R7 em 0
02D0    020000   F     767                     JMP FMG_GET_REGION_SWITCH_1_R6
                       768                     FMG_GET_REGION_SWITCH_1_R6: 
                       769                         ;Rotacionar R1 vezes o byte escolhido (RLC)
02D3    E9             770                         MOV A, R1
02D4    C0E0           771                         PUSH ACC
02D6    E6             772                         MOV A, @R0
                       773                         
                       774                         FMG_GET_REGION_SMALL_ROTATE_R6: 
02D7    33             775                             RLC A
02D8    D9FD           776                             DJNZ R1, FMG_GET_REGION_SMALL_ROTATE_R6
                       777                         
02DA    D0E0           778                         POP ACC
02DC    F9             779                         MOV R1, A
02DD    EE             780                         MOV A, R6
02DE    33             781                         RLC A
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    13
                     
02DF    FE             782                         MOV R6, A ; Carry contem o bit a ser introduzido no sistema
                       783                         
02E0    020000   F     784                         JMP FMG_GET_REGION_LOOP_END
                       785                     FMG_GET_REGION_SWITCH_1_R7: 
                       786                         ;Rotacionar R1 vezes o byte escolhido (RLC)
02E3    E9             787                         MOV A, R1
02E4    C0E0           788                         PUSH ACC
02E6    E6             789                         MOV A, @R0
                       790                         
                       791                         FMG_GET_REGION_SMALL_ROTATE_R7: 
02E7    33             792                             RLC A
02E8    D9FD           793                             DJNZ R1, FMG_GET_REGION_SMALL_ROTATE_R7
                       794                         
02EA    D0E0           795                         POP ACC
02EC    F9             796                         MOV R1, A
02ED    EF             797                         MOV A, R7
02EE    33             798                         RLC A
02EF    FF             799                         MOV R7, A ; Carry contem o bit a ser introduzido no sistema
                       800                         
02F0    020000   F     801                         JMP FMG_GET_REGION_LOOP_END
                       802                 FMG_GET_REGION_LOOP_END: 
02F3    0D             803                     INC R5
02F4    DB06           804                     DJNZ R3, FMG_GET_REGION_LOOP_Y_WORKAROUND
02F6    0C             805                     INC R4
02F7    DA06           806                 DJNZ R2, FMG_GET_REGION_LOOP_X_WORKAROUND
02F9    020000   F     807                 JMP FMG_GET_REGION_END
                       808                 FMG_GET_REGION_LOOP_Y_WORKAROUND: 
02FC    020000   F     809                     LJMP FMG_GET_REGION_LOOP_Y
                       810                 FMG_GET_REGION_LOOP_X_WORKAROUND: 
02FF    020000   F     811                     LJMP FMG_GET_REGION_LOOP_X
                       812         FMG_GET_REGION_END: 
0302    D0E0           813         POP ACC
0304    D0E0           814         POP ACC
0306    FB             815         MOV R3, A
0307    D0E0           816         POP ACC
0309    FA             817         MOV R2, A
030A    D0E0           818         POP ACC
030C    F9             819         MOV R1, A
030D    D0E0           820         POP ACC
030F    F8             821         MOV R0, A
0310    22             822         RET
------                 823     CODE
                       824         ;Coloca no carry o bit definido por R0, que se encontra em R1
                       825         FMG_FIND_BIT: 
0311    E9             826             MOV A, R1
                       827             FMG_FIND_BIT_LOOP: 
0312    13             828                 RRC A
0313    D8FD           829                 DJNZ R0, FMG_FIND_BIT_LOOP
0315    22             830         RET
------                 831     CODE 
                       832         FMG_DRAW_NEXT_PIECE: 
0316    C0D0           833         PUSH PSW
0318    D2D4           834         SETB RS1
031A    C2D3           835         CLR RS0
031C    7912           836     MOV R1 , # 012H 
031E    7A00           837     MOV R2 , # 000H 
0320    120000   F     838         LCALL LCD_XY
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    14
                     
0323    78C0           839     MOV R0 , # 0C0H 
0325    120000   F     840         LCALL LCD_DRAW
                       841         
0328    7C0A           842         MOV R4, #00AH
                       843         FMG_DRAW_NEXT_PIECE_TOP: 
032A    7840           844     MOV R0 , # 040H 
032C    120000   F     845             LCALL LCD_DRAW
032F    DCF9           846             DJNZ R4, FMG_DRAW_NEXT_PIECE_TOP
                       847             
0331    78C0           848     MOV R0 , # 0C0H 
0333    120000   F     849         LCALL LCD_DRAW
                       850         
0336    7B28           851     MOV R3 , # 40 
0338    7CC0           852         MOV R4, #0C0H
                       853         
033A    7912           854     MOV R1 , # 012H 
033C    7A01           855     MOV R2 , # 001H 
033E    120000   F     856         LCALL LCD_XY
                       857         
0341    78FF           858     MOV R0 , # 0FFH 
0343    120000   F     859         LCALL LCD_DRAW
0346    7800           860     MOV R0 , # 000H 
0348    120000   F     861         LCALL LCD_DRAW
                       862         
034B    7C02           863         MOV R4, #002H
                       864         FMG_DRAW_NEXT_PIECE_INTERNAL: 
034D    EB             865             MOV A, R3 ; Desenha a pr�xima pe�a
034E    F9             866             MOV R1, A
034F    87E0           867             MOV ACC, @R1
                       868             
0351    A2E7           869             MOV C, ACC.7
0353    92E0           870             MOV ACC.0, C
0355    92E1           871             MOV ACC.1, C
0357    A2E6           872             MOV C, ACC.6
0359    92E2           873             MOV ACC.2, C
035B    92E3           874             MOV ACC.3, C
035D    A2E4           875             MOV C, ACC.4
035F    92E6           876             MOV ACC.6, C
0361    92E7           877             MOV ACC.7, C
0363    A2E5           878             MOV C, ACC.5
0365    92E5           879             MOV ACC.5, C
0367    92E4           880             MOV ACC.4, C
                       881     
0369    A8E0           882     MOV R0 , ACC 
036B    120000   F     883             LCALL LCD_DRAW
036E    A8E0           884     MOV R0 , ACC 
0370    120000   F     885             LCALL LCD_DRAW
                       886     
0373    EB             887             MOV A, R3; Desenha bytes inferiores
0374    F9             888             MOV R1, A
0375    87E0           889             MOV ACC, @R1
                       890             
0377    A2E0           891             MOV C, ACC.0
0379    92E7           892             MOV ACC.7, C
037B    92E6           893             MOV ACC.6, C
037D    A2E1           894             MOV C, ACC.1
037F    92E5           895             MOV ACC.5, C
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    15
                     
0381    92E4           896             MOV ACC.4, C
0383    A2E3           897             MOV C, ACC.3
0385    92E1           898             MOV ACC.1, C
0387    92E0           899             MOV ACC.0, C
0389    A2E2           900             MOV C, ACC.2
038B    92E2           901             MOV ACC.2, C
038D    92E3           902             MOV ACC.3, C
                       903     
038F    A8E0           904     MOV R0 , ACC 
0391    120000   F     905             LCALL LCD_DRAW
0394    A8E0           906     MOV R0 , ACC 
0396    120000   F     907             LCALL LCD_DRAW
                       908             
0399    7B29           909     MOV R3 , # 41 
039B    DCB0           910             DJNZ R4, FMG_DRAW_NEXT_PIECE_INTERNAL
                       911         
039D    7800           912     MOV R0 , # 000H 
039F    120000   F     913         LCALL LCD_DRAW
03A2    78FF           914     MOV R0 , # 0FFH 
03A4    120000   F     915         LCALL LCD_DRAW
                       916         
03A7    7912           917     MOV R1 , # 012H 
03A9    7A02           918     MOV R2 , # 002H 
03AB    120000   F     919         LCALL LCD_XY
03AE    7803           920     MOV R0 , # 003H 
03B0    120000   F     921         LCALL LCD_DRAW
                       922         
03B3    7C0A           923         MOV R4, #00AH
                       924         FMG_DRAW_NEXT_PIECE_BOTTOM: 
03B5    7802           925     MOV R0 , # 002H 
03B7    120000   F     926             LCALL LCD_DRAW
03BA    DCF9           927             DJNZ R4, FMG_DRAW_NEXT_PIECE_BOTTOM
03BC    7803           928     MOV R0 , # 003H 
03BE    120000   F     929         LCALL LCD_DRAW    
03C1    D0D0           930         POP PSW
03C3    22             931         RET
------                 932     CODE
                       933     FMG_FROM_WAIT_TO_GAME: 
03C4    E525           934     MOV A , 37 
03C6    782A           935     MOV R0 , # 42 
03C8    F6             936         MOV @R0, A
                       937         
03C9    E526           938     MOV A , 38 
03CB    782B           939     MOV R0 , # 43 
03CD    F6             940         MOV @R0, A
                       941         
03CE    E527           942     MOV A , 39 
03D0    782C           943     MOV R0 , # 44 
03D2    F6             944         MOV @R0, A
                       945         
03D3    E528           946     MOV A , 40 
03D5    782D           947     MOV R0 , # 45 
03D7    F6             948         MOV @R0, A
                       949         
03D8    E529           950     MOV A , 41 
03DA    782E           951     MOV R0 , # 46 
03DC    F6             952         MOV @R0, A
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    16
                     
03DD    22             953         RET
------                 954     CODE
                       955     FMG_SELECT_NEW_PIECE: 
03DE    120000   F     956         LCALL RAND8
03E1    75F007         957         MOV B, #007H
03E4    84             958         DIV AB; Capturando apenas as 8 possiveis pe�as (temos 7 pe�as portanto um dos valores sera desconsiderado)
03E5    E5F0           959         MOV A, B
03E7    75F003         960         MOV B, #003H
03EA    A4             961         MUL AB
03EB    900000   F     962         MOV DPTR, #FMG_SELECT_PIECE_SWITCH
03EE    73             963         JMP @A+DPTR
                       964         FMG_SELECT_PIECE_SWITCH: 
03EF    020000   F     965             JMP FMG_SELECT_PIECE_I
03F2    020000   F     966             JMP FMG_SELECT_PIECE_O
03F5    020000   F     967             JMP FMG_SELECT_PIECE_S
03F8    020000   F     968             JMP FMG_SELECT_PIECE_Z
03FB    020000   F     969             JMP FMG_SELECT_PIECE_L
03FE    020000   F     970             JMP FMG_SELECT_PIECE_J
0401    020000   F     971             JMP FMG_SELECT_PIECE_T
                       972         FMG_SELECT_PIECE_O: 
0404    900000   F     973             MOV DPTR, #FMG_PIECES_O
0407    801E           974             SJMP FMG_SELECT_NEW_PIECE_END
                       975         FMG_SELECT_PIECE_S: 
0409    900000   F     976             MOV DPTR, #FMG_PIECES_S
040C    8019           977             SJMP FMG_SELECT_NEW_PIECE_END
                       978         FMG_SELECT_PIECE_Z: 
040E    900000   F     979             MOV DPTR, #FMG_PIECES_Z
0411    8014           980             SJMP FMG_SELECT_NEW_PIECE_END
                       981         FMG_SELECT_PIECE_L: 
0413    900000   F     982             MOV DPTR, #FMG_PIECES_L
0416    800F           983             SJMP FMG_SELECT_NEW_PIECE_END
                       984         FMG_SELECT_PIECE_J: 
0418    900000   F     985             MOV DPTR, #FMG_PIECES_J
041B    800A           986             SJMP FMG_SELECT_NEW_PIECE_END
                       987         FMG_SELECT_PIECE_T: 
041D    900000   F     988             MOV DPTR, #FMG_PIECES_T
0420    8005           989             SJMP FMG_SELECT_NEW_PIECE_END
                       990         FMG_SELECT_PIECE_I: 
                       991             ;Escolhe qual vai ser a pe�a
0422    900000   F     992             MOV DPTR, #FMG_PIECES_I
0425    8000           993             SJMP FMG_SELECT_NEW_PIECE_END
                       994         ;Parte final da rotina, com a pe�a correta selecionada, devemos escolher qual a rota��o inidial da mesma e
                       995         ;popular as vari�veis de ambiente com ela.
                       996         FMG_SELECT_NEW_PIECE_END: 
                       997             ;Salva a pe�a escolhida na mem�ria
0427    858325         998     MOV 37 , DPH 
042A    858226         999     MOV 38 , DPL 
042D    7400          1000             MOV A, #000H
042F    93            1001             MOVC A, @A+DPTR ; Quantidade de rota��es da pe�a
0430    F5F0          1002             MOV B, A ; Coloca em B a quantidade de rota��es da pe�a
0432    120000   F    1003             LCALL RAND8
0435    84            1004             DIV AB
0436    E5F0          1005             MOV A, B ;Escolhendo a rota��o
0438    F527          1006     MOV 39 , A 
043A    75F002        1007             MOV B, #002H
043D    A4            1008             MUL AB ; Multiplico por 2 para ir para a pe�a correta
043E    2401          1009             ADD A, #001H ;Soma 1 j� que o primeiro valor contem a quantidade de rota��es da pe�a
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    17
                     
0440    F9            1010             MOV R1, A
                      1011             ;Coloca em id 0 e 1 qual a pe�a selecionada
0441    93            1012             MOVC A, @A+DPTR ;Representa��o da pe�a (primeiros bytes)
0442    F528          1013     MOV 40 , A 
0444    E9            1014             MOV A, R1
0445    2401          1015             ADD A, #001H ;Representa��o da pe�a (segundos bytes)
0447    93            1016             MOVC A, @A+DPTR
0448    F529          1017     MOV 41 , A 
044A    22            1018         RET
------                1019     CODE
                      1020     FMG_CLEAR_MEMORY: 
044B    794C          1021         MOV R1, #04CH
044D    7840          1022     MOV R0 , # 64 
                      1023         
044F    7B03          1024         MOV R3, #003H
                      1025         
                      1026         FMG_CLEAR_MEMORY_MAIN_LOOP: 
0451    7A04          1027             MOV R2, #004H
                      1028             FMG_CLEAR_MEMORY_LOOP_BORDER_LEFT: 
0453    76FF          1029                 MOV @R0, #0FFH
0455    08            1030                 INC R0
0456    DAFB          1031                 DJNZ R2, FMG_CLEAR_MEMORY_LOOP_BORDER_LEFT
0458    790A          1032             MOV R1, #00AH
                      1033             FMG_CLEAR_MEMORY_LOOP_MIDDLE: 
045A    7600          1034                 MOV @R0, #000H
045C    08            1035                 INC R0
045D    D9FB          1036                 DJNZ R1, FMG_CLEAR_MEMORY_LOOP_MIDDLE
045F    7A04          1037             MOV R2, #004H
                      1038             FMG_CLEAR_MEMORY_LOOP_BORDER_RIGHT: 
0461    76FF          1039                 MOV @R0, #0FFH
0463    08            1040                 INC R0
0464    DAFB          1041                 DJNZ R2, FMG_CLEAR_MEMORY_LOOP_BORDER_RIGHT
0466    DBE9          1042             DJNZ R3, FMG_CLEAR_MEMORY_MAIN_LOOP
0468    7A12          1043         MOV R2, #012H
                      1044         FMG_CLEAR_MEMORY_LOOP_BORDER_FLOOR: 
046A    76FF          1045             MOV @R0, #0FFH
046C    08            1046             INC R0
046D    DAFB          1047             DJNZ R2, FMG_CLEAR_MEMORY_LOOP_BORDER_FLOOR
046F    22            1048         RET
                      1049     ;Desenha o grade na tela
------                1050     CODE
                      1051     FMG_DRAW_SCREEN: 
                      1052         ;Desenhar na tela significa pegar os bytes definidos no grade e passar para a tela.
                      1053         ;lembrando que ser� usado um fator de 2x.
0470    C0D0          1054         PUSH PSW
0472    D2D4          1055         SETB RS1
0474    C2D3          1056         CLR RS0
0476    7921          1057     MOV R1 , # 021H 
0478    7A00          1058     MOV R2 , # 000H 
047A    120000   F    1059         LCALL LCD_XY
047D    7D21          1060         MOV R5, #021H
047F    7C0A          1061         MOV R4, #00AH
0481    7B40          1062     MOV R3 , # 64 
0483    0B            1063         INC R3
0484    0B            1064         INC R3
0485    0B            1065         INC R3
0486    0B            1066         INC R3 ; Grid + 4
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    18
                     
                      1067         FMG_LOOP_LINHA_SUPERIOR: 
0487    EB            1068             MOV A, R3; Move o conte�do de R1 para o acumulador
0488    F9            1069             MOV R1, A
0489    87E0          1070             MOV ACC, @R1
                      1071             
048B    A2E0          1072             MOV C, ACC.0
048D    92E7          1073             MOV ACC.7, C
048F    92E6          1074             MOV ACC.6, C
0491    A2E1          1075             MOV C, ACC.1
0493    92E5          1076             MOV ACC.5, C
0495    92E4          1077             MOV ACC.4, C
0497    A2E3          1078             MOV C, ACC.3
0499    92E1          1079             MOV ACC.1, C
049B    92E0          1080             MOV ACC.0, C
049D    A2E2          1081             MOV C, ACC.2
049F    92E2          1082             MOV ACC.2, C
04A1    92E3          1083             MOV ACC.3, C
                      1084     
04A3    A8E0          1085     MOV R0 , ACC 
04A5    120000   F    1086             LCALL LCD_DRAW
04A8    A8E0          1087     MOV R0 , ACC 
04AA    120000   F    1088             LCALL LCD_DRAW
                      1089             
04AD    0B            1090             INC R3
04AE    0D            1091             INC R5
04AF    DCD6          1092             DJNZ R4, FMG_LOOP_LINHA_SUPERIOR
04B1    7921          1093     MOV R1 , # 021H 
04B3    7A01          1094     MOV R2 , # 001H 
04B5    120000   F    1095         LCALL LCD_XY
04B8    7E02          1096         MOV R6, #002H
                      1097         FMG_LOOP_LINHA_3: 
04BA    EB            1098         MOV A, R3
04BB    2408          1099         ADD A, #008H
04BD    FB            1100         MOV R3, A ;Deslocamento das paredes
04BE    7C0A          1101         MOV R4, #00AH
04C0    7D21          1102         MOV R5, #021H
                      1103         FMG_LOOP_LINHA_2: 
04C2    ED            1104             MOV A, R5
04C3    F9            1105     MOV R1 , A 
                      1106             ;MOV lcd_Y, A
04C4    120000   F    1107             LCALL LCD_XY
                      1108     
04C7    EB            1109             MOV A, R3; Move o conte�do de R1 para o acumulador
04C8    F9            1110             MOV R1, A
04C9    87E0          1111             MOV ACC, @R1
                      1112             
04CB    A2E7          1113             MOV C, ACC.7
04CD    92E0          1114             MOV ACC.0, C
04CF    92E1          1115             MOV ACC.1, C
04D1    A2E6          1116             MOV C, ACC.6
04D3    92E2          1117             MOV ACC.2, C
04D5    92E3          1118             MOV ACC.3, C
04D7    A2E4          1119             MOV C, ACC.4
04D9    92E6          1120             MOV ACC.6, C
04DB    92E7          1121             MOV ACC.7, C
04DD    A2E5          1122             MOV C, ACC.5
04DF    92E5          1123             MOV ACC.5, C
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    19
                     
04E1    92E4          1124             MOV ACC.4, C
                      1125             
04E3    A8E0          1126     MOV R0 , ACC 
04E5    120000   F    1127             LCALL LCD_DRAW
                      1128     
04E8    A8E0          1129     MOV R0 , ACC 
04EA    120000   F    1130             LCALL LCD_DRAW
                      1131             
04ED    ED            1132             MOV A, R5
04EE    F9            1133     MOV R1 , A 
                      1134             
04EF    EA            1135     MOV A , R2 
04F0    2401          1136             ADD A, #001H
04F2    FA            1137     MOV R2 , A 
04F3    120000   F    1138             LCALL LCD_XY
                      1139             
04F6    EB            1140             MOV A, R3; Move o conte�do de R1 para o acumulador
04F7    F9            1141             MOV R1, A
04F8    87E0          1142             MOV ACC, @R1
                      1143             
04FA    A2E0          1144             MOV C, ACC.0
04FC    92E7          1145             MOV ACC.7, C
04FE    92E6          1146             MOV ACC.6, C
0500    A2E1          1147             MOV C, ACC.1
0502    92E5          1148             MOV ACC.5, C
0504    92E4          1149             MOV ACC.4, C
0506    A2E3          1150             MOV C, ACC.3
0508    92E1          1151             MOV ACC.1, C
050A    92E0          1152             MOV ACC.0, C
050C    A2E2          1153             MOV C, ACC.2
050E    92E2          1154             MOV ACC.2, C
0510    92E3          1155             MOV ACC.3, C
                      1156     
0512    A8E0          1157     MOV R0 , ACC 
0514    120000   F    1158             LCALL LCD_DRAW
0517    A8E0          1159     MOV R0 , ACC 
0519    120000   F    1160             LCALL LCD_DRAW
                      1161             
051C    EB            1162             MOV A, R3
051D    2401          1163             ADD A, #001H
051F    FB            1164             MOV R3, A
                      1165             
0520    ED            1166             MOV A, R5
0521    2402          1167             ADD A, #002H
0523    FD            1168             MOV R5, A
                      1169             
0524    EA            1170     MOV A , R2 
0525    9401          1171             SUBB A, #001H
0527    FA            1172     MOV R2 , A 
                      1173             
0528    DC98          1174             DJNZ R4, FMG_LOOP_LINHA_2
052A    7A03          1175     MOV R2 , # 003H 
052C    DE8C          1176             DJNZ R6, FMG_LOOP_LINHA_3
052E    D0D0          1177             POP PSW
0530    22            1178         RET
------                1179     CODE
                      1180     FMG_DRAW_BORDER: 
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    20
                     
0531    C0D0          1181         PUSH PSW
0533    D2D4          1182         SETB RS1
0535    C2D3          1183         CLR RS0
                      1184         
0537    7920          1185     MOV R1 , # 020H 
0539    7A00          1186     MOV R2 , # 000H 
053B    120000   F    1187         LCALL LCD_XY
                      1188         
053E    7B05          1189         MOV R3, #005H
                      1190         FMG_DRAW_BORDER_LOOP_EXTERNAL: 
0540    7C16          1191             MOV R4, #016H
                      1192             FMG_DRAW_BORDER_LOOP: 
0542    78FF          1193     MOV R0 , # 0FFH 
0544    120000   F    1194                 LCALL LCD_DRAW
0547    DCF9          1195                 DJNZ R4, FMG_DRAW_BORDER_LOOP
0549    7920          1196     MOV R1 , # 020H 
054B    EA            1197     MOV A , R2 
054C    2401          1198             ADD A, #001H
054E    FA            1199     MOV R2 , A 
054F    120000   F    1200             LCALL LCD_XY
0552    DBEC          1201         DJNZ R3, FMG_DRAW_BORDER_LOOP_EXTERNAL
                      1202         
0554    7920          1203     MOV R1 , # 020H 
0556    7A05          1204     MOV R2 , # 005H 
0558    120000   F    1205         LCALL LCD_XY
                      1206         
055B    7B16          1207         MOV R3, #016H
                      1208         FMG_DRAW_BORDER_LOOP_BOTTOM: 
055D    7801          1209     MOV R0 , # 001H 
055F    120000   F    1210             LCALL LCD_DRAW
0562    DBF9          1211             DJNZ R3, FMG_DRAW_BORDER_LOOP_BOTTOM
0564    D0D0          1212         POP PSW
0566    22            1213         RET
                      1214     ;Rotina para tratamento de interrup��o de tempo principal.
                      1215     ;Deve: 
                      1216     ;   Atualizar o status do fmg_control e fmg_control_old, de acordo com os bot�es
                      1217     ;   Deve atualizar e checar o valor da flag fmg_time_to_fall_0 e fmg_time_to_fall_1
------                1218     CODE
                      1219         FMG_TIMER_0: 
0567    C0E0          1220             PUSH ACC ;Acumulador para pilha
0569    C0D0          1221             PUSH PSW ;Guardar a infroma��o do banco de registradores que est� sendo utilizado
056B    E8            1222             MOV A, R0
056C    C0E0          1223             PUSH ACC
056E    E9            1224             MOV A, R1
056F    C0E0          1225             PUSH ACC
                      1226             
0571    C28C          1227             CLR TR0
                      1228             
                      1229             ;Atualiza��o do tempo
0573    E532          1230     MOV A , 50 
0575    2401          1231             ADD A, #001H
0577    F532          1232     MOV 50 , A 
                      1233             
                      1234             ;Checagem do tempo
0579    F8            1235             MOV R0, A
057A    E533          1236     MOV A , 51 
057C    F9            1237             MOV R1, A
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    21
                     
057D    58            1238             ANL A, R0
057E    99            1239             SUBB A, R1
057F    6020          1240             JZ FMG_TIMER_0_FALL ;Se for para a pe�a cair, ent�o caia!
                      1241             
                      1242             ;Ignorando o teste dos bot�es!
                      1243             ;MOV A, #000h
                      1244             ;JMP FMG_TIMER_0_END
                      1245             
                      1246             ;Adimitindo que: B1(P1.0) == Up, B2(P1.1) == Down, B3(P1.2) == Left, B4(P1.3) == Right, B5(P1.4) == Not Used
0581    309018        1247             JNB P1.0, FMG_TIMER_0_ROTATE
0584    30911A        1248             JNB P1.1, FMG_TIMER_0_FALL
0587    309208        1249             JNB P1.2, FMG_TIMER_0_LEFT
058A    30930A        1250             JNB P1.3, FMG_TIMER_0_RIGHT
058D    7400          1251             MOV A, #000H
058F    020000   F    1252             JMP FMG_TIMER_0_END
                      1253     
                      1254             FMG_TIMER_0_LEFT: 
0592    7401          1255                 MOV A, #001H
0594    020000   F    1256                 JMP FMG_TIMER_0_END
                      1257             FMG_TIMER_0_RIGHT: 
0597    7402          1258                 MOV A, #002H
0599    020000   F    1259                 JMP FMG_TIMER_0_END
                      1260             FMG_TIMER_0_ROTATE: 
059C    7403          1261                 MOV A, #003H
059E    020000   F    1262                 JMP FMG_TIMER_0_END
                      1263             FMG_TIMER_0_FALL: 
05A1    7400          1264                 MOV A, #000H
05A3    F532          1265     MOV 50 , A 
05A5    F531          1266     MOV 49 , A 
05A7    7404          1267                 MOV A, #004H
05A9    020000   F    1268                 JMP FMG_TIMER_0_END
                      1269                 
                      1270             FMG_TIMER_0_END: 
05AC    F530          1271     MOV 48 , A 
                      1272            
05AE    74DC          1273             MOV A, #0DCH
05B0    F58A          1274             MOV TL0, A
                      1275             
05B2    7411          1276             MOV A, #011H
05B4    F58C          1277             MOV TH0, A
05B6    D28C          1278             SETB TR0
                      1279             
05B8    D0E0          1280             POP ACC
05BA    F9            1281             MOV R1, A
05BB    D0E0          1282             POP ACC
05BD    F8            1283             MOV R0, A
05BE    D0D0          1284             POP PSW
05C0    D0E0          1285             POP ACC
05C2    22            1286         RET
                      1287     ;Valida o estado atual do jogo, este momento ocorre ap�s a detec��o de colis�es, e deve:
                      1288     ;   Sortear pr�xima pe�a
                      1289     ;   Remover linhas completas
                      1290     ;   Verificar condi��o de derrota
------                1291     CODE
                      1292         FMG_VALIDATE_COLLISION: 
05C3    900000   F    1293             MOV DPTR, #FMG_VALIDATE_COLLISION_SWITCH
05C6    E52F          1294     MOV A , 47 
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    22
                     
05C8    75F003        1295             MOV B, #003H
05CB    A4            1296             MUL AB
05CC    73            1297             JMP @A+DPTR
                      1298             FMG_VALIDATE_COLLISION_SWITCH: 
05CD    020000   F    1299                 JMP FMG_VALIDATE_COLLISION_SWITCH_CONTINUE
05D0    020000   F    1300                 JMP FMG_VALIDATE_COLLISION_SWITCH_COLLISION
                      1301             
                      1302             FMG_VALIDATE_COLLISION_SWITCH_COLLISION: 
05D3    AC23          1303     MOV R4 , 35 
05D5    AD24          1304     MOV R5 , 36 
05D7    120000   F    1305                 LCALL FMG_GET_REGION
05DA    AA2D          1306     MOV R2 , 45 
05DC    AB2E          1307     MOV R3 , 46 
05DE    EA            1308                 MOV A, R2
05DF    6E            1309                 XRL A, R6
05E0    FE            1310                 MOV R6, A
                      1311                 
05E1    EB            1312                 MOV A, R3
05E2    6F            1313                 XRL A, R7
05E3    FF            1314                 MOV R7, A
05E4    AC23          1315     MOV R4 , 35 
05E6    AD24          1316     MOV R5 , 36 
05E8    120000   F    1317                 LCALL FMG_SET_REGION
                      1318                 
                      1319                 ;Sortear pr�xima pe�a
05EB    120000   F    1320                 LCALL FMG_FROM_WAIT_TO_GAME ; Coloca a pe�a da espera no jogo.
05EE    120000   F    1321                 LCALL FMG_SELECT_NEW_PIECE  ; Seleciona a pe�a que ficar� na espera
                      1322                 
05F1    752307        1323     MOV 35 , # 007H 
05F4    752400        1324     MOV 36 , # 000H 
05F7    752F00        1325     MOV 47 , # 000H 
                      1326                 ;Remover linhas completas
                      1327                 ;LCALL FMG_REMOVE_COMPLETE_LINES
                      1328             
                      1329             FMG_VALIDATE_COLLISION_SWITCH_CONTINUE: 
05FA    22            1330         RET
------                1331     CODE
                      1332         FMG_REMOVE_COMPLETE_LINES: 
                      1333             ;R7 - Contador de linhas removidas!
05FB    7400          1334             MOV A, #000H
05FD    C0E0          1335             PUSH ACC
                      1336             ; Capturar �ltima linha da tela
05FF    7840          1337     MOV R0 , # 64 
0601    7428          1338             MOV A, #028H ; Deslocamento do come�o das linhas na mem�ria
0603    28            1339             ADD A, R0 ; Posi��o do come�o das linhas na mem�ria
0604    F8            1340             MOV R0, A
                      1341             
                      1342             FMG_REMOVE_COMPLETE_LINES_LOOP: 
0605    E8            1343                 MOV A, R0
0606    F9            1344                 MOV R1, A ;R1 est� na mesma posi��o que R0
0607    7A0A          1345                 MOV R2, #00AH ;Quantidade de colunas �teis por linha
0609    7BFF          1346                 MOV R3, #0FFH ; M�scara para teste das linhas
                      1347                 
                      1348                 FMG_REMOVE_COMPLETE_LINES_LOOP_0: 
060B    E7            1349                     MOV A, @R1 ; Captura o elemento que est� em R1
060C    5B            1350                     ANL A, R3 ; Captura quais as linhas que est�o completas
060D    FB            1351                     MOV R3, A
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    23
                     
060E    09            1352                     INC R1
                      1353                     
060F    DAFA          1354                     DJNZ R2, FMG_REMOVE_COMPLETE_LINES_LOOP_0
                      1355                 ;R3 possui as linhas completas, move-lo para A para acessar cada linha
0611    EB            1356                 MOV A, R3
                      1357                 
                      1358                 ;Se R3 for 0 ent�o n�o temos linhas a serem removidas, caso contr�rio removemos linhas
0612    6002          1359                 JZ FMG_REMOVE_COMPLETE_LINES_LINE_COMPLETE
0614    7012          1360                 JNZ FMG_REMOVE_COMPLETE_LINES_REMOVE_SPECIFIC
                      1361                 ;Nenhuma linha a remover, logo movo para a pr�xima linha macro do jogo.
                      1362                 FMG_REMOVE_COMPLETE_LINES_LINE_COMPLETE: 
0616    E8            1363                     MOV A, R0
0617    C3            1364                     CLR C
0618    9440          1365     SUBB A , # 64 
061A    C3            1366                     CLR C
061B    9404          1367                     SUBB A, #004H ; Verificar se R0 est� j� na posi��o 0
061D    6014          1368                     JZ FMG_REMOVE_COMPLETE_LINES_END ; J� verificamos as primeiras linhas
061F    2440          1369     ADD A , # 64 
0621    940E          1370                     SUBB A, #00EH
0623    F8            1371                     MOV R0, A
0624    F9            1372                     MOV R1, A
0625    020000   F    1373                     JMP FMG_REMOVE_COMPLETE_LINES_LOOP
                      1374                 FMG_REMOVE_COMPLETE_LINES_REMOVE_SPECIFIC: 
0628    120000   F    1375                     LCALL FMG_REMOVE_SPECIFIC_LINE
062B    D0E0          1376                     POP ACC
062D    04            1377                     INC A
062E    C0E0          1378                     PUSH ACC
0630    020000   F    1379                     JMP FMG_REMOVE_COMPLETE_LINES_LOOP
                      1380             FMG_REMOVE_COMPLETE_LINES_END: 
0633    D0E0          1381             POP ACC
0635    FF            1382             MOV R7, A
0636    22            1383         RET
------                1384     CODE
                      1385         ;Remove uma linha especifica do jogo.
                      1386         ;R0 - Come�o da linha (macro 8 bits)
                      1387         ;R3 - M�scara do AND das linhas (linhas a serem removidas)
                      1388         ;Tentar n�o afetar R0!
                      1389         FMG_REMOVE_SPECIFIC_LINE: 
0637    E8            1390             MOV A, R0
0638    C0E0          1391             PUSH ACC
063A    E9            1392             MOV A, R1
063B    C0E0          1393             PUSH ACC
063D    EA            1394             MOV A, R2
063E    C0E0          1395             PUSH ACC
0640    EB            1396             MOV A, R3
0641    C0E0          1397             PUSH ACC
0643    120000   F    1398             LCALL FMG_SELECT_LINE_TO_REMOVE
0646    7C0A          1399             MOV R4, #00AH
0648    75F004        1400             MOV B, #004H
                      1401             FMG_REMOVE_SPECIFIC_LINE_MAIN_LOOP: 
                      1402             ;R5 Contem o bit a ser removido
064B    E8            1403             MOV A, R0
064C    C3            1404             CLR C
064D    9412          1405             SUBB A, #012H
064F    F9            1406             MOV R1, A ;Endere�o da linha superior
0650    7407          1407             MOV A, #007H
0652    C3            1408             CLR C
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    24
                     
0653    9D            1409             SUBB A, R5 ;Gerar m�scara superior
0654    FA            1410             MOV R2, A
                      1411             ;Criar a m�scara superior em R6 e a inferiro em R7
0655    120000   F    1412             LCALL FMG_CREATE_SUPERIOR_MASK
0658    ED            1413             MOV A, R5
0659    FA            1414             MOV R2, A
065A    120000   F    1415             LCALL FMG_CREATE_INFERIOR_MASK
                      1416             
065D    E8            1417             MOV A, R0
065E    C3            1418             CLR C
065F    9440          1419     SUBB A , # 64 
0661    C3            1420             CLR C
0662    95F0          1421             SUBB A, B ;Subtraindo 4 de A
0664    600B          1422             JZ FMG_REMOVE_SPECIFIC_LINE_SET_NOT_CARRY ; Se R0 for a linha superior ignorar teste com linhas superiores
                      1423      
0666    E7            1424             MOV A, @R1 ; Linha superior
0667    20E003        1425             JB ACC.0, FMG_REMOVE_SPECIFIC_LINE_SET_CARRY
066A    30E004        1426             JNB ACC.0, FMG_REMOVE_SPECIFIC_LINE_SET_NOT_CARRY
                      1427             
                      1428             FMG_REMOVE_SPECIFIC_LINE_SET_CARRY: 
066D    D3            1429                 SETB C
066E    020000   F    1430                 JMP FMG_REMOVE_SPECIFIC_LINE_SET_CARRY_END
                      1431             FMG_REMOVE_SPECIFIC_LINE_SET_NOT_CARRY: 
0671    C3            1432                 CLR C
0672    020000   F    1433                 JMP FMG_REMOVE_SPECIFIC_LINE_SET_CARRY_END
                      1434             FMG_REMOVE_SPECIFIC_LINE_SET_CARRY_END: 
0675    E6            1435                 MOV A, @R0
0676    5E            1436                 ANL A, R6
0677    13            1437                 RRC A
0678    FE            1438                 MOV R6, A
0679    E6            1439                 MOV A, @R0
067A    5F            1440                 ANL A, R7
067B    6E            1441                 XRL A, R6
067C    F6            1442                 MOV @R0, A
                      1443             ;Fazer a etapa de corre��o para as linhas superiores
067D    E8            1444             MOV A, R0
067E    C3            1445             CLR C
067F    9440          1446     SUBB A , # 64 
0681    C3            1447             CLR C
0682    95F0          1448             SUBB A, B ;Subtraindo 4 de A
                      1449             ;Se R0 for a linha superior ent�o ok, fim
0684    6027          1450             JZ FMG_REMOVE_SPECIFIC_LINE_END
                      1451             
                      1452             ;Se n�o verificar linha superior
0686    E9            1453             MOV A, R1
0687    C3            1454             CLR C
0688    9440          1455     SUBB A , # 64 
068A    C3            1456             CLR C
068B    95F0          1457             SUBB A, B ;Subtraindo 4 de A
                      1458             ;Se a linha superior for a primeira linha, ent�o limpar o carry e fazer apenas o rotate
068D    6002          1459             JZ FMG_REMOVE_SPECIFIC_LINE_LEVEL_1
068F    7007          1460             JNZ FMG_REMOVE_SPECIFIC_LINE_LEVEL_2
                      1461             
                      1462             FMG_REMOVE_SPECIFIC_LINE_LEVEL_1: 
0691    C3            1463                 CLR C
0692    E7            1464                 MOV A, @R1
0693    13            1465                 RRC A
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    25
                     
0694    F7            1466                 MOV @R1, A
0695    020000   F    1467                 JMP FMG_REMOVE_SPECIFIC_LINE_END
                      1468             FMG_REMOVE_SPECIFIC_LINE_LEVEL_2: 
0698    E7            1469                 MOV A, @R1
0699    FA            1470                 MOV R2, A ; Linha superior
069A    E9            1471                 MOV A, R1
069B    9412          1472                 SUBB A, #012H
069D    F9            1473                 MOV R1, A; Linhas 2 niveis acima
069E    E7            1474                 MOV A, @R1
069F    13            1475                 RRC A
06A0    EA            1476                 MOV A, R2
06A1    13            1477                 RRC A
06A2    FA            1478                 MOV R2, A
06A3    C3            1479                 CLR C
06A4    E7            1480                 MOV A, @R1
06A5    13            1481                 RRC A
06A6    F7            1482                 MOV @R1, A
06A7    E9            1483                 MOV A, R1
06A8    2412          1484                 ADD A, #012H
06AA    F9            1485                 MOV R1, A
06AB    EA            1486                 MOV A, R2
06AC    F7            1487                 MOV @R1, A
                      1488             FMG_REMOVE_SPECIFIC_LINE_END: 
06AD    08            1489             INC R0
06AE    05F0          1490             INC B
06B0    DC03          1491             DJNZ R4, FMG_REMOVE_LINE_MAIN_LOOP_WORKAROUND
                      1492             
06B2    020000   F    1493             JMP FMG_REMOVE_SPECIFIC_LINE_END_END
                      1494             FMG_REMOVE_LINE_MAIN_LOOP_WORKAROUND: 
06B5    020000   F    1495                 LJMP FMG_REMOVE_SPECIFIC_LINE_MAIN_LOOP
                      1496             FMG_REMOVE_SPECIFIC_LINE_END_END: 
06B8    D0E0          1497         POP ACC
06BA    FB            1498         MOV R3, A
06BB    D0E0          1499         POP ACC
06BD    FA            1500         MOV R2, A
06BE    D0E0          1501         POP ACC
06C0    F9            1502         MOV R1, A
06C1    D0E0          1503         POP ACC
06C3    F8            1504         MOV R0, A
06C4    22            1505         RET
                      1506         
------                1507     CODE
                      1508         FMG_CREATE_SUPERIOR_MASK: 
06C5    7400          1509         MOV A, #000H
                      1510         FMG_CREATE_SUPERIOR_MASK_LOOP: 
06C7    D3            1511             SETB C
06C8    13            1512             RRC A
06C9    DAFC          1513             DJNZ R2, FMG_CREATE_SUPERIOR_MASK_LOOP
06CB    FE            1514         MOV R6, A
06CC    22            1515         RET
                      1516         
------                1517     CODE
                      1518         FMG_CREATE_INFERIOR_MASK: 
06CD    EA            1519         MOV A, R2
06CE    6006          1520         JZ FMG_CREATE_INFERIOR_MASK_END
06D0    7400          1521         MOV A, #000H
                      1522         FMG_CREATE_INFERIOR_MASK_LOOP: 
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    26
                     
06D2    D3            1523             SETB C
06D3    33            1524             RLC A
06D4    DAFC          1525             DJNZ R2, FMG_CREATE_INFERIOR_MASK_LOOP
                      1526         FMG_CREATE_INFERIOR_MASK_END: 
06D6    FF            1527         MOV R7, A
06D7    22            1528         RET
------                1529     CODE
                      1530         FMG_SELECT_LINE_TO_REMOVE: 
                      1531         ;R3 - m�scara a ser analizada
                      1532         ; N�o alterar nem R0 nem R7
06D8    C3            1533         CLR C
06D9    7908          1534         MOV R1, #008H
06DB    7D00          1535         MOV R5, #000H
06DD    EB            1536         MOV A, R3
                      1537         FMG_SELECT_LINE_TO_REMOVE_LOOP: 
06DE    13            1538             RRC A
06DF    4003          1539             JC FMG_SELECT_LINE_TO_REMOVE_END
06E1    0D            1540             INC R5
06E2    D9FA          1541             DJNZ R1, FMG_SELECT_LINE_TO_REMOVE_LOOP
                      1542         FMG_SELECT_LINE_TO_REMOVE_END: 
06E4    22            1543         RET
                      1544     ;Checa se uma determinada posi��o de pe�a � v�lida.
                      1545     ; in R1 = Rota��o da pe�a a ser checada
                      1546     ; in R4 = Posi��o X a ser checada
                      1547     ; in R5 = Posi��o Y a ser checada
                      1548     ; out C | 0 Posi��o/Rota��o inv�lida
                      1549     ;       | 1 Posi��o/Rota��o v�lida
------                1550     CODE
                      1551         FMG_UPDATE_STATE_CHECK_COLLISION: 
                      1552         ;Carrega a pe�a para os registradores R2 e R3
                      1553         ; R1 contem a rota��o da pe�a
06E5    852A83        1554     MOV DPH , 42 
06E8    852B82        1555     MOV DPL , 43 
06EB    E9            1556         MOV A, R1
06EC    75F002        1557         MOV B, #002H ;Cada pe�a � representada por 2 bytes
06EF    A4            1558         MUL AB
06F0    2401          1559         ADD A, #001H ;Retira o contador de pe�as
06F2    93            1560         MOVC A, @A+DPTR
                      1561         ;A est� com a posi��o da pe�a na mem�ria
06F3    FA            1562         MOV R2, A
06F4    E9            1563         MOV A, R1
06F5    75F002        1564         MOV B, #002H ; Cada pe�a � representada por 2 bytes
06F8    A4            1565         MUL AB
06F9    2402          1566         ADD A, #002H ; 1 para o contador e 1 para pegar o segundo byte da pe�a
06FB    93            1567         MOVC A, @A+DPTR
06FC    FB            1568         MOV R3, A
                      1569         ;R2 possui os primeiros bytes (esquerda)
                      1570         ;R3 possui os outros bytes (direita)
06FD    120000   F    1571         LCALL FMG_GET_REGION
                      1572         ;R6 e R7 contem a informa��o sobre a regi�o, 
                      1573         ;s� fazer o XOR e sei se a posi��o est� ocupada (movimento inv�lido), ou n�o;
0700    EA            1574         MOV A, R2
0701    6E            1575         XRL A, R6 ; Xor entre R2 e R6
0702    9A            1576         SUBB A, R2 ; Se n�o ocorreu nenhuma colis�o a subtra��o por R2 e R6 deve retornar Zero
0703    9E            1577         SUBB A, R6
0704    6003          1578         JZ FMG_UPDATE_STATE_CHECK_COLLISION_TEST_R7
0706    020000   F    1579         JMP FMG_UPDATE_STATE_CHECK_COLLISION_COLLISION
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    27
                     
                      1580         FMG_UPDATE_STATE_CHECK_COLLISION_TEST_R7: 
0709    EB            1581             MOV A, R3
070A    6F            1582             XRL A, R7;Xor entre R2 e R6
070B    9B            1583             SUBB A, R3 ; Se n�o ocorreu nenhuma colis�o a subtra��o por R3 e R7 deve retornar Zero
070C    9F            1584             SUBB A, R7    
070D    6007          1585             JZ FMG_UPDATE_STATE_CHECK_COLLISION_NOT_COLLISION
070F    020000   F    1586             JMP FMG_UPDATE_STATE_CHECK_COLLISION_COLLISION
                      1587             FMG_UPDATE_STATE_CHECK_COLLISION_COLLISION:  ;Se tiver colis�o ent�o v� para o fim!
0712    C3            1588                 CLR C
0713    020000   F    1589                 JMP FMG_UPDATE_STATE_CHECK_COLLISION_END
                      1590             FMG_UPDATE_STATE_CHECK_COLLISION_NOT_COLLISION:  ; Se n�o tiver colis�o, atualize a posi��o da pe�a!
0716    D3            1591                 SETB C
0717    020000   F    1592                 JMP FMG_UPDATE_STATE_CHECK_COLLISION_END
                      1593             FMG_UPDATE_STATE_CHECK_COLLISION_END: 
071A    22            1594         RET
------                1595     CODE
                      1596         ;Seta os valores de uma determinada regi�o da mem�ria
                      1597         ; R4 contem a posi��o x,
                      1598         ; R5 contem a posi��o y
                      1599         ; R6 contem a regi�o ser desenhada (esquerda)
                      1600         ; R7 contem a regi�o ser desenhada (direita)
                      1601         
                      1602         FMG_SET_REGION: 
071B    E8            1603         MOV A, R0
071C    C0E0          1604         PUSH ACC
071E    E9            1605         MOV A, R1
071F    C0E0          1606         PUSH ACC
0721    EA            1607         MOV A, R2
0722    C0E0          1608         PUSH ACC
0724    EB            1609         MOV A, R3
0725    C0E0          1610         PUSH ACC
                      1611         
0727    ED            1612         MOV A, R5
0728    C0E0          1613         PUSH ACC
072A    7A04          1614         MOV R2, #004H
                      1615         FMG_SET_REGION_LOOP_X: 
072C    D0E0          1616             POP ACC
072E    ADE0          1617             MOV R5, ACC
0730    C0E0          1618             PUSH ACC
0732    7B04          1619             MOV R3, #004H
                      1620             FMG_SET_REGION_LOOP_Y: 
                      1621                 ;C�lculo do byte
0734    ED            1622                 MOV A, R5
0735    75F008        1623                 MOV B, #008H
0738    84            1624                 DIV AB
0739    A9F0          1625                 MOV R1, B 
073B    09            1626                 INC R1; R1 contem o bit que quero modificar (+1 por causa do 0 based)
                      1627                 
073C    75F012        1628                 MOV B, #012H ; Byte = 18 * A + R4
073F    A4            1629                 MUL AB
0740    2C            1630                 ADD A, R4
0741    F8            1631                 MOV R0, A 
0742    7440          1632     MOV A , # 64 
0744    28            1633                 ADD A, R0
0745    F8            1634                 MOV R0, A ; R0 contem a posi��o do byte que estou querendo
                      1635                 
                      1636                 ;Definir se R6 ou R7 e ent�o chamar o FMG_FIND_BIT
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    28
                     
0746    EA            1637                 MOV A, R2
0747    14            1638                 DEC A
0748    75F002        1639                 MOV B, #002H
074B    84            1640                 DIV AB
074C    75F003        1641                 MOV B, #003H
074F    A4            1642                 MUL AB
0750    900000   F    1643                 MOV DPTR, #FMG_SET_REGION_SWITCH_1_R6_R7
0753    73            1644                 JMP @A+DPTR
                      1645                 FMG_SET_REGION_SWITCH_1_R6_R7: 
0754    020000   F    1646                     JMP FMG_SET_REGION_SWITCH_1_R7 ;Como o contador est� invertido temos o R7 em 0
0757    020000   F    1647                     JMP FMG_SET_REGION_SWITCH_1_R6
                      1648                     FMG_SET_REGION_SWITCH_1_R6: 
                      1649                         ;Rotacionar R1 vezes o byte escolhido (RLC)
075A    E9            1650                         MOV A, R1
075B    C0E0          1651                         PUSH ACC
075D    E6            1652                         MOV A, @R0
                      1653                         
                      1654                         FMG_SET_REGION_SMALL_ROTATE_R6: 
075E    33            1655                             RLC A
075F    D9FD          1656                             DJNZ R1, FMG_SET_REGION_SMALL_ROTATE_R6
0761    F6            1657                         MOV @R0, A
                      1658                         
0762    D0E0          1659                         POP ACC
0764    F9            1660                         MOV R1, A
0765    EE            1661                         MOV A, R6
0766    33            1662                         RLC A
0767    FE            1663                         MOV R6, A ; Carry contem o bit a ser introduzido no sistema
                      1664                         
0768    E6            1665                         MOV A, @R0
                      1666                         FMG_SET_REGION_SMALL_ROTATE_BACK_R6: 
0769    13            1667                             RRC A
076A    D9FD          1668                             DJNZ R1, FMG_SET_REGION_SMALL_ROTATE_BACK_R6
076C    F6            1669                         MOV @R0, A
076D    020000   F    1670                         JMP FMG_SET_REGION_LOOP_END
                      1671                     FMG_SET_REGION_SWITCH_1_R7: 
                      1672                         ;Rotacionar R1 vezes o byte escolhido (RLC)
0770    E9            1673                         MOV A, R1
0771    C0E0          1674                         PUSH ACC
0773    E6            1675                         MOV A, @R0
                      1676                         
                      1677                         FMG_SET_REGION_SMALL_ROTATE_R7: 
0774    33            1678                             RLC A
0775    D9FD          1679                             DJNZ R1, FMG_SET_REGION_SMALL_ROTATE_R7
0777    F6            1680                         MOV @R0, A
                      1681                         
0778    D0E0          1682                         POP ACC
077A    F9            1683                         MOV R1, A
077B    EF            1684                         MOV A, R7
077C    33            1685                         RLC A
077D    FF            1686                         MOV R7, A ; Carry contem o bit a ser introduzido no sistema
                      1687                         
077E    E6            1688                         MOV A, @R0
                      1689                         FMG_SET_REGION_SMALL_ROTATE_BACK_R7: 
077F    13            1690                             RRC A
0780    D9FD          1691                             DJNZ R1, FMG_SET_REGION_SMALL_ROTATE_BACK_R7
0782    F6            1692                         MOV @R0, A
0783    020000   F    1693                         JMP FMG_SET_REGION_LOOP_END
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    29
                     
                      1694                 FMG_SET_REGION_LOOP_END: 
0786    0D            1695                     INC R5
0787    DB06          1696                     DJNZ R3, FMG_SET_REGION_LOOP_Y_WORKAROUND
0789    0C            1697                     INC R4
078A    DA06          1698                 DJNZ R2, FMG_SET_REGION_LOOP_X_WORKAROUND
078C    020000   F    1699                 JMP FMG_SET_REGION_END
                      1700                 FMG_SET_REGION_LOOP_Y_WORKAROUND: 
078F    020000   F    1701                     LJMP FMG_SET_REGION_LOOP_Y
                      1702                 FMG_SET_REGION_LOOP_X_WORKAROUND: 
0792    020000   F    1703                     LJMP FMG_SET_REGION_LOOP_X
                      1704         FMG_SET_REGION_END: 
0795    D0E0          1705         POP ACC
0797    D0E0          1706         POP ACC
0799    FB            1707         MOV R3, A
079A    D0E0          1708         POP ACC
079C    FA            1709         MOV R2, A
079D    D0E0          1710         POP ACC
079F    F9            1711         MOV R1, A
07A0    D0E0          1712         POP ACC
07A2    F8            1713         MOV R0, A
07A3    22            1714         RET
------                1715     CODE
                      1716         FMG_UPDATE_SCORE: 
                      1717         ;R7 Quantidade de linhas removidas
                      1718         ;fmg_score_0 - pontua��o Inferior
                      1719         ;fmg_score_1 - pontua��o Superior
                      1720         
07A4    EF            1721         MOV A, R7
07A5    75F003        1722         MOV B, #003H
07A8    A4            1723         MUL AB
                      1724         
07A9    900000   F    1725         MOV DPTR, #FMG_UPDATE_SCORE_SWITCH_LINES
07AC    73            1726         JMP @A+DPTR
                      1727         
                      1728         FMG_UPDATE_SCORE_SWITCH_LINES: 
07AD    020000   F    1729             JMP FMG_UPDATE_SCORE_SWITCH_LINES_0
07B0    020000   F    1730             JMP FMG_UPDATE_SCORE_SWITCH_LINES_1
07B3    020000   F    1731             JMP FMG_UPDATE_SCORE_SWITCH_LINES_2
07B6    020000   F    1732             JMP FMG_UPDATE_SCORE_SWITCH_LINES_3
07B9    020000   F    1733             JMP FMG_UPDATE_SCORE_SWITCH_LINES_4
                      1734         FMG_UPDATE_SCORE_SWITCH_LINES_0: 
07BC    7800          1735             MOV R0, #000H;
07BE    020000   F    1736             JMP FMG_UPDATE_SCORE_END
                      1737         FMG_UPDATE_SCORE_SWITCH_LINES_1: 
07C1    7801          1738             MOV R0, #001H;
07C3    020000   F    1739             JMP FMG_UPDATE_SCORE_END
                      1740         FMG_UPDATE_SCORE_SWITCH_LINES_2: 
07C6    7803          1741             MOV R0, #003H;
07C8    020000   F    1742             JMP FMG_UPDATE_SCORE_END
                      1743         FMG_UPDATE_SCORE_SWITCH_LINES_3: 
07CB    7805          1744             MOV R0, #005H;
07CD    020000   F    1745             JMP FMG_UPDATE_SCORE_END
                      1746         FMG_UPDATE_SCORE_SWITCH_LINES_4: 
07D0    7808          1747             MOV R0, #008H;
07D2    020000   F    1748             JMP FMG_UPDATE_SCORE_END
                      1749         FMG_UPDATE_SCORE_END: 
07D5    E534          1750     MOV A , 52 
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    30
                     
07D7    28            1751             ADD A, R0
07D8    F534          1752     MOV 52 , A 
07DA    E535          1753     MOV A , 53 
07DC    3400          1754             ADDC A, #000H
07DE    F535          1755     MOV 53 , A 
07E0    22            1756         RET
------                1757     CODE
                      1758         FMG_DRAW_SCORE: 
07E1    C0D0          1759         PUSH PSW
07E3    E535          1760     MOV A , 53 
07E5    75F006        1761         MOV B, #006H
07E8    A4            1762         MUL AB
07E9    75F00A        1763         MOV B, #00AH
07EC    84            1764         DIV AB
07ED    FA            1765         MOV R2, A; Estouro!
07EE    E5F0          1766         MOV A, B; Unidades da parte High do score!
07F0    F9            1767         MOV R1, A
07F1    E534          1768     MOV A , 52 
07F3    75F00A        1769         MOV B, #00AH
07F6    84            1770         DIV AB
07F7    FF            1771         MOV R7, A ;Divis�o
07F8    E5F0          1772         MOV A, B
07FA    29            1773         ADD A, R1
07FB    F9            1774         MOV R1, A 
07FC    75F00A        1775         MOV B, #00AH
07FF    84            1776         DIV AB
0800    2A            1777         ADD A, R2
0801    FA            1778         MOV R2, A
0802    E5F0          1779         MOV A, B
0804    F9            1780         MOV R1, A ;Unidades!
0805    EF            1781         MOV A, R7
0806    3400          1782         ADDC A, #000H
0808    FF            1783         MOV R7, A
                      1784         
0809    E535          1785     MOV A , 53 
080B    75F005        1786         MOV B, #005H
080E    A4            1787         MUL AB
080F    2A            1788         ADD A, R2
0810    75F00A        1789         MOV B, #00AH
0813    84            1790         DIV AB
0814    FB            1791         MOV R3, A;Estouro
0815    E5F0          1792         MOV A, B; Dezenas da parte High do score!
0817    FA            1793         MOV R2, A
0818    EF            1794         MOV A, R7
0819    75F00A        1795         MOV B, #00AH
081C    84            1796         DIV AB
081D    FF            1797         MOV R7, A ; Divis�o
081E    E5F0          1798         MOV A, B
0820    2A            1799         ADD A, R2
0821    FA            1800         MOV R2, A ;Dezenas
0822    75F00A        1801         MOV B, #00AH
0825    84            1802         DIV AB
0826    2B            1803         ADD A, R3
0827    FB            1804         MOV R3, A
0828    E5F0          1805         MOV A, B
082A    FA            1806         MOV R2, A
082B    EF            1807         MOV A, R7
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    31
                     
082C    3400          1808         ADDC A, #000H
082E    FF            1809         MOV R7, A
                      1810         
082F    E535          1811     MOV A , 53 
0831    75F002        1812         MOV B, #002H
0834    A4            1813         MUL AB
0835    2B            1814         ADD A, R3
0836    75F00A        1815         MOV B, #00AH
0839    84            1816         DIV AB
083A    FC            1817         MOV R4, A;Estouro
083B    E5F0          1818         MOV A, B; Centenas da parte High do score!
083D    FB            1819         MOV R3, A
083E    EF            1820         MOV A, R7
083F    75F00A        1821         MOV B, #00AH
0842    84            1822         DIV AB
0843    FF            1823         MOV R7, A ; Divis�o
0844    E5F0          1824         MOV A,B
0846    2B            1825         ADD A, R3
0847    FB            1826         MOV R3, A ;Centenas
0848    75F00A        1827         MOV B, #00AH
084B    84            1828         DIV AB
084C    2C            1829         ADD A, R4
084D    FC            1830         MOV R4, A
084E    E5F0          1831         MOV A, B
0850    FB            1832         MOV R3, A
0851    EF            1833         MOV A, R7
0852    3400          1834         ADDC A, #000H
0854    FF            1835         MOV R7, A
                      1836         
0855    E9            1837         MOV A, R1
0856    C0E0          1838         PUSH ACC
0858    EA            1839         MOV A, R2
0859    C0E0          1840         PUSH ACC
085B    EB            1841         MOV A, R3
085C    C0E0          1842         PUSH ACC
085E    EC            1843         MOV A, R4
085F    C0E0          1844         PUSH ACC
                      1845         
                      1846         ;;;;;;;;;;;;;
                      1847         ;; DESENHO ;;
                      1848         ;;;;;;;;;;;;;
0861    D2D4          1849         SETB RS1
0863    C2D3          1850         CLR RS0
                      1851         
0865    900000   F    1852         MOV DPTR, #FMG_NUMBERS_FONT
0868    7B00          1853         MOV R3, #000H
                      1854         ;Milhares
086A    D0E0          1855         POP ACC
086C    793C          1856     MOV R1 , # 03CH 
086E    7A00          1857     MOV R2 , # 000H 
0870    120000   F    1858         LCALL LCD_XY
                      1859         
0873    75F003        1860         MOV B, #003H
0876    A4            1861         MUL AB
0877    FC            1862         MOV R4, A
0878    93            1863         MOVC A, @A+DPTR
0879    F8            1864     MOV R0 , A 
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    32
                     
087A    120000   F    1865         LCALL LCD_DRAW
087D    0C            1866         INC R4
087E    EC            1867         MOV A, R4
087F    93            1868         MOVC A, @A+DPTR
0880    F8            1869     MOV R0 , A 
0881    120000   F    1870         LCALL LCD_DRAW
0884    0C            1871         INC R4
0885    EC            1872         MOV A, R4
0886    93            1873         MOVC A, @A+DPTR
0887    F8            1874     MOV R0 , A 
0888    120000   F    1875         LCALL LCD_DRAW
                      1876         
                      1877         ;Centenas
088B    D0E0          1878         POP ACC
088D    7940          1879     MOV R1 , # 040H 
088F    7A00          1880     MOV R2 , # 000H 
0891    120000   F    1881         LCALL LCD_XY
                      1882         
0894    75F003        1883         MOV B, #003H
0897    A4            1884         MUL AB
0898    FC            1885         MOV R4, A
0899    93            1886         MOVC A, @A+DPTR
089A    F8            1887     MOV R0 , A 
089B    120000   F    1888         LCALL LCD_DRAW
089E    0C            1889         INC R4
089F    EC            1890         MOV A, R4
08A0    93            1891         MOVC A, @A+DPTR
08A1    F8            1892     MOV R0 , A 
08A2    120000   F    1893         LCALL LCD_DRAW
08A5    0C            1894         INC R4
08A6    EC            1895         MOV A, R4
08A7    93            1896         MOVC A, @A+DPTR
08A8    F8            1897     MOV R0 , A 
08A9    120000   F    1898         LCALL LCD_DRAW
                      1899         
                      1900         ;Dezenas
08AC    D0E0          1901         POP ACC
08AE    7944          1902     MOV R1 , # 044H 
08B0    7A00          1903     MOV R2 , # 000H 
08B2    120000   F    1904         LCALL LCD_XY
                      1905         
08B5    75F003        1906         MOV B, #003H
08B8    A4            1907         MUL AB
08B9    FC            1908         MOV R4, A
08BA    93            1909         MOVC A, @A+DPTR
08BB    F8            1910     MOV R0 , A 
08BC    120000   F    1911         LCALL LCD_DRAW
08BF    0C            1912         INC R4
08C0    EC            1913         MOV A, R4
08C1    93            1914         MOVC A, @A+DPTR
08C2    F8            1915     MOV R0 , A 
08C3    120000   F    1916         LCALL LCD_DRAW
08C6    0C            1917         INC R4
08C7    EC            1918         MOV A, R4
08C8    93            1919         MOVC A, @A+DPTR
08C9    F8            1920     MOV R0 , A 
08CA    120000   F    1921         LCALL LCD_DRAW
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    33
                     
                      1922         
                      1923         ;Unidades
08CD    D0E0          1924         POP ACC
08CF    7948          1925     MOV R1 , # 048H 
08D1    7A00          1926     MOV R2 , # 000H 
08D3    120000   F    1927         LCALL LCD_XY
08D6    75F003        1928         MOV B, #003H
08D9    A4            1929         MUL AB
08DA    FC            1930         MOV R4, A
08DB    93            1931         MOVC A, @A+DPTR
08DC    F8            1932     MOV R0 , A 
08DD    120000   F    1933         LCALL LCD_DRAW
08E0    0C            1934         INC R4
08E1    EC            1935         MOV A, R4
08E2    93            1936         MOVC A, @A+DPTR
08E3    F8            1937     MOV R0 , A 
08E4    120000   F    1938         LCALL LCD_DRAW
08E7    0C            1939         INC R4
08E8    EC            1940         MOV A, R4
08E9    93            1941         MOVC A, @A+DPTR
08EA    F8            1942     MOV R0 , A 
08EB    120000   F    1943         LCALL LCD_DRAW
08EE    D0D0          1944         POP PSW
08F0    22            1945         RET
------                1946     CODE
                      1947         FMG_TEST_END: 
08F1    7840          1948     MOV R0 , # 64 
08F3    7404          1949             MOV A, #004H
08F5    28            1950             ADD A, R0
08F6    F8            1951             MOV R0, A
08F7    7B00          1952             MOV R3, #000H
08F9    7C0A          1953             MOV R4, #00AH
                      1954             
                      1955             FMG_TEST_END_LOOP: 
08FB    E6            1956                 MOV A, @R0
08FC    4B            1957                 ORL A, R3
08FD    FB            1958                 MOV R3, A
08FE    08            1959                 INC R0
08FF    DCFA          1960                 DJNZ R4, FMG_TEST_END_LOOP
0901    EB            1961             MOV A, R3
0902    54F0          1962             ANL A, #0F0H
0904    6005          1963             JZ FMG_TEST_END_END
0906    7000          1964             JNZ FMG_TEST_END_END_GAME
                      1965             
                      1966             FMG_TEST_END_END_GAME: 
0908    752F02        1967     MOV 47 , # 002H 
                      1968             FMG_TEST_END_END: 
090B    22            1969         RET
------                1970     CODE
                      1971         FMG_DRAW_END: 
090C    C0D0          1972         PUSH PSW
                      1973         
090E    120000   F    1974         LCALL LCD_CLEAR
                      1975     
                      1976         ;;;;;;;;;
                      1977         ;; THE ;;
                      1978         ;;;;;;;;;
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    34
                     
0911    7904          1979     MOV R1 , # 004H 
0913    7A01          1980     MOV R2 , # 001H 
0915    120000   F    1981         LCALL LCD_XY    
                      1982         
0918    7C0E          1983         MOV R4, #00EH
                      1984         FMG_DRAW_END_T_TOP: 
091A    78FF          1985     MOV R0 , # 0FFH 
091C    120000   F    1986             LCALL LCD_DRAW
091F    DCF9          1987             DJNZ R4, FMG_DRAW_END_T_TOP
                      1988         
0921    7B05          1989         MOV R3, #005H
                      1990         FMG_DRAW_END_T_H_TOP: 
0923    7800          1991     MOV R0 , # 000H 
0925    120000   F    1992             LCALL LCD_DRAW
0928    DBF9          1993             DJNZ R3, FMG_DRAW_END_T_H_TOP
                      1994             
092A    7C05          1995         MOV R4, #005H
                      1996         FMG_DRAW_END_H1_TOP: 
092C    78FF          1997     MOV R0 , # 0FFH 
092E    120000   F    1998             LCALL LCD_DRAW
0931    DCF9          1999             DJNZ R4, FMG_DRAW_END_H1_TOP
0933    7C05          2000         MOV R4, #005H
                      2001         FMG_DRAW_END_H2_TOP: 
0935    78F0          2002     MOV R0 , # 0F0H 
0937    120000   F    2003             LCALL LCD_DRAW
093A    DCF9          2004             DJNZ R4, FMG_DRAW_END_H2_TOP
093C    7C05          2005         MOV R4, #005H
                      2006         FMG_DRAW_END_H3_TOP: 
093E    78FF          2007     MOV R0 , # 0FFH 
0940    120000   F    2008             LCALL LCD_DRAW
0943    DCF9          2009             DJNZ R4, FMG_DRAW_END_H3_TOP
                      2010         
0945    7B05          2011         MOV R3, #005H
                      2012         FMG_DRAW_END_H_E_TOP: 
0947    7800          2013     MOV R0 , # 000H 
0949    120000   F    2014             LCALL LCD_DRAW
094C    DBF9          2015             DJNZ R3, FMG_DRAW_END_H_E_TOP
                      2016         
094E    7C05          2017         MOV R4, #005H
                      2018         FMG_DRAW_END_E_TOP: 
0950    78FF          2019     MOV R0 , # 0FFH 
0952    120000   F    2020             LCALL LCD_DRAW
0955    DCF9          2021             DJNZ R4, FMG_DRAW_END_E_TOP
0957    7C05          2022         MOV R4, #005H
                      2023         FMG_DRAW_END_E2_TOP: 
0959    78CF          2024     MOV R0 , # 0CFH 
095B    120000   F    2025             LCALL LCD_DRAW
095E    DCF9          2026             DJNZ R4, FMG_DRAW_END_E2_TOP
0960    7C05          2027         MOV R4, #005H
                      2028         FMG_DRAW_END_E3_TOP: 
0962    780F          2029     MOV R0 , # 00FH 
0964    120000   F    2030             LCALL LCD_DRAW
0967    DCF9          2031             DJNZ R4, FMG_DRAW_END_E3_TOP
                      2032         
                      2033         ;Linha 2
0969    7908          2034     MOV R1 , # 008H 
096B    7A02          2035     MOV R2 , # 002H 
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    35
                     
096D    120000   F    2036         LCALL LCD_XY
                      2037         
0970    7C05          2038         MOV R4, #005H
                      2039         FMG_DRAW_END_T_MIDDLE: 
0972    78FF          2040     MOV R0 , # 0FFH 
0974    120000   F    2041             LCALL LCD_DRAW
0977    DCF9          2042             DJNZ R4, FMG_DRAW_END_T_MIDDLE
                      2043         
0979    7B0A          2044         MOV R3, #00AH
                      2045         FMG_DRAW_END_T_H_MIDDLE: 
097B    7800          2046     MOV R0 , # 000H 
097D    120000   F    2047             LCALL LCD_DRAW
0980    DBF9          2048             DJNZ R3, FMG_DRAW_END_T_H_MIDDLE
                      2049         
0982    7C05          2050         MOV R4, #005H
                      2051         FMG_DRAW_END_H1_MIDDLE: 
0984    78FF          2052     MOV R0 , # 0FFH 
0986    120000   F    2053             LCALL LCD_DRAW
0989    DCF9          2054             DJNZ R4, FMG_DRAW_END_H1_MIDDLE
                      2055     
098B    7C05          2056         MOV R4, #005H
                      2057         FMG_DRAW_END_H2_MIDDLE: 
098D    780F          2058     MOV R0 , # 00FH 
098F    120000   F    2059             LCALL LCD_DRAW
0992    DCF9          2060             DJNZ R4, FMG_DRAW_END_H2_MIDDLE
                      2061         
0994    7C05          2062         MOV R4, #005H
                      2063         FMG_DRAW_END_H3_MIDDLE: 
0996    78FF          2064     MOV R0 , # 0FFH 
0998    120000   F    2065             LCALL LCD_DRAW
099B    DCF9          2066             DJNZ R4, FMG_DRAW_END_H3_MIDDLE
                      2067         
099D    7B05          2068         MOV R3, #005H
                      2069         FMG_DRAW_END_H_E_MIDDLE: 
099F    7800          2070     MOV R0 , # 000H 
09A1    120000   F    2071             LCALL LCD_DRAW
09A4    DBF9          2072             DJNZ R3, FMG_DRAW_END_H_E_MIDDLE
                      2073             
09A6    7C05          2074         MOV R4, #005H
                      2075         FMG_DRAW_END_E_BOTTOM: 
09A8    78FF          2076     MOV R0 , # 0FFH 
09AA    120000   F    2077             LCALL LCD_DRAW
09AD    DCF9          2078             DJNZ R4, FMG_DRAW_END_E_BOTTOM
09AF    7C05          2079         MOV R4, #005H
                      2080         FMG_DRAW_END_E2_BOTTOM: 
09B1    78F3          2081     MOV R0 , # 0F3H 
09B3    120000   F    2082             LCALL LCD_DRAW
09B6    DCF9          2083             DJNZ R4, FMG_DRAW_END_E2_BOTTOM
09B8    7C05          2084         MOV R4, #005H
                      2085         FMG_DRAW_END_E3_BOTTOM: 
09BA    78F0          2086     MOV R0 , # 0F0H 
09BC    120000   F    2087             LCALL LCD_DRAW
09BF    DCF9          2088             DJNZ R4, FMG_DRAW_END_E3_BOTTOM
                      2089         
                      2090         FMG_DRAW_END_ETERNAL: 
09C1    020000   F    2091             JMP FMG_DRAW_END_ETERNAL
09C4    D0D0          2092         POP PSW
MACRO ASSEMBLER MAIN                             12/08/14  14:20:57 PAGE    36
                     
09C6    22            2093         RET
                      2094     
                      2095     CODE AT 0
0000    020000   F    2096         LJMP INIT
                      2097     
                      2098     CODE AT 000BH
                      2099     TIMER0_INTERRUPT: 
000B    120000   F    2100         LCALL FMG_TIMER_0
000E    32            2101         RETI;
                      2102     
------                2103     CODE
                      2104     INIT:  
09C7    758190        2105         MOV SP, #90H 
09CA    120000   F    2106         LCALL LCD_INIT
09CD    020000   F    2107         LJMP MAIN 
                      2108         
------                2109     CODE
                      2110     MAIN:  
                      2111         ;Banco 2
09D0    D2D4          2112         SETB RS1
09D2    C2D3          2113         CLR RS0
09D4    7901          2114         MOV R1, #001H
09D6    7A01          2115         MOV R2, #001H
                      2116         
                      2117     
09D8    7900          2118     MOV R1 , # 000H 
09DA    7A00          2119     MOV R2 , # 000H 
09DC    120000   F    2120         LCALL LCD_XY
09DF    120000   F    2121         LCALL FMG_TETRIS_MAIN
                      2122     END
MACRO ASSEMBLER MAIN                                       12/08/14 14:20:57 PAGE     0


SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES             REFERENCES

FMG_PIECES_O . . .  C ADDR   011CH   R  SEG=?PR?MAIN            387# 973 
LCD_DRAW . . . . .  C ADDR   006FH   R  SEG=?PR?MAIN            218# 840 845 849 
                                                                859 861 883 885 905 
                                                                907 913 915 921 926 
                                                                929 1086 1088 1127 
                                                                1130 1158 1160 1194 
                                                                1210 1865 1870 1875 
                                                                1888 1893 1898 1911 
                                                                1916 1921 1933 1938 
                                                                1943 1986 1992 1998 
                                                                2003 2008 2014 2020 
                                                                2025 2030 2041 2047 
                                                                2053 2059 2065 2071 
                                                                2077 2082 2087 
BIG_DELAY. . . . .  C ADDR   00ECH   R  SEG=?PR?MAIN            186 315# 
RCAP2H . . . . . .  D ADDR   00CBH   A                          33# 
DPL. . . . . . . .  D ADDR   0082H   A                          16# 604 623 999 1555 
                                                                
P0 . . . . . . . .  D ADDR   0080H   A                          8# 
FMG_REMOVE_COMPLE~  C ADDR   060BH   R  SEG=?PR?MAIN            1348# 1354 
P1 . . . . . . . .  D ADDR   0090H   A                          9# 155 156 157 1247 
                                                                1248 1249 1250 
FMG_DRAW_END_T_TOP  C ADDR   091AH   R  SEG=?PR?MAIN            1984# 1987 
FMG_UPDATE_SCORE_~  C ADDR   07ADH   R  SEG=?PR?MAIN            1725 1728# 
FMG_DRAW_SCORE . .  C ADDR   07E1H   R  SEG=?PR?MAIN            463 1758# 
INIT_DELAY . . . .  C ADDR   00F2H   R  SEG=?PR?MAIN            321# 322 
CP_RL2 . . . . . .  B ADDR   00C8H.0 A                          105# 
EXEN2. . . . . . .  B ADDR   00C8H.3 A                          102# 
B. . . . . . . . .  D ADDR   00F0H   A                          14# 147 151 514 517 
                                                                526 626 742 744 747 
                                                                758 761 957 959 960 
                                                                1002 1005 1007 1295 
                                                                1400 1421 1448 1457 
                                                                1490 1557 1564 1623 
                                                                1625 1628 1639 1641 
                                                                1722 1761 1763 1766 
                                                                1769 1772 1775 1779 
                                                                1786 1789 1792 1795 
                                                                1798 1801 1805 1812 
                                                                1815 1818 1821 1824 
                                                                1827 1831 1860 1883 
                                                                1906 1928 
P2 . . . . . . . .  D ADDR   00A0H   A                          10# 
FMG_DRAW_END_H1_M~  C ADDR   0984H   R  SEG=?PR?MAIN            2051# 2054 
FMG_SET_REGION_LO~  C ADDR   0792H   R  SEG=?PR?MAIN            1698 1702# 
FMG_VALIDATE_COLL~  C ADDR   05FAH   R  SEG=?PR?MAIN            1299 1329# 
FMG_UPDATE_STATE_~  C ADDR   0293H   R  SEG=?PR?MAIN            536 711# 
LCD_XY . . . . . .  C ADDR   00B3H   R  SEG=?PR?MAIN            271# 838 856 919 
                                                                1059 1095 1107 1138 
                                                                1187 1200 1205 1858 
                                                                1881 1904 1927 1981 
                                                                2036 2120 
LCD_SEND_SERIAL_D~  C ADDR   007FH   R  SEG=?PR?MAIN            228 231# 
T2EX . . . . . . .  B ADDR   0090H.1 A                          95# 
PS . . . . . . . .  B ADDR   00B8H.4 A                          65# 
SP . . . . . . . .  D ADDR   0081H   A                          15# 2105 
P3 . . . . . . . .  D ADDR   00B0H   A                          11# 158 159 
FMG_DRAW_END_H2_M~  C ADDR   098DH   R  SEG=?PR?MAIN            2057# 2060 
FMG_SET_REGION_LO~  C ADDR   078FH   R  SEG=?PR?MAIN            1696 1700# 
FMG_GET_REGION_SW~  C ADDR   02D3H   R  SEG=?PR?MAIN            767 768# 
FMG_UPDATE_STATE_~  C ADDR   0254H   R  SEG=?PR?MAIN            616 618# 
FMG_UPDATE_STATE_~  C ADDR   06E5H   R  SEG=?PR?MAIN            554 577 615 699 1551# 
                                                                
FMG_DRAW_BORDER. .  C ADDR   0531H   R  SEG=?PR?MAIN            437 1180# 
FMG_PIECES_S . . .  C ADDR   011FH   R  SEG=?PR?MAIN            389# 976 
FMG_SCORE_0. . . .  N NUMB   0034h                              362# 414 1750 1752 
                                                                1768 
T0 . . . . . . . .  B ADDR   00B0H.4 A                          74# 
AC . . . . . . . .  B ADDR   00D0H.6 A                          41# 
RCAP2L . . . . . .  D ADDR   00CAH   A                          32# 
MAIN . . . . . . .  C ADDR   09D0H   R  SEG=?PR?MAIN            2107 2110# 
FMG_DRAW_END_H3_M~  C ADDR   0996H   R  SEG=?PR?MAIN            2063# 2066 
FMG_DRAW_END_T_H_~  C ADDR   097BH   R  SEG=?PR?MAIN            2045# 2048 
FMG_DRAW_END_E2_T~  C ADDR   0959H   R  SEG=?PR?MAIN            2023# 2026 
FMG_TEST_END_END .  C ADDR   090BH   R  SEG=?PR?MAIN            1963 1968# 
FMG_SET_REGION_SM~  C ADDR   0769H   R  SEG=?PR?MAIN            1666# 1668 
FMG_SELECT_LINE_T~  C ADDR   06E4H   R  SEG=?PR?MAIN            1539 1542# 
FMG_GET_REGION_SW~  C ADDR   02E3H   R  SEG=?PR?MAIN            766 785# 
FMG_UPDATE_STATE_~  C ADDR   0217H   R  SEG=?PR?MAIN            556 562# 
FMG_PIECES_T . . .  C ADDR   013BH   R  SEG=?PR?MAIN            397# 988 
FMG_SCORE_1. . . .  N NUMB   0035h                              363# 415 1753 1755 
                                                                1760 1785 1811 
?PR?MAIN . . . . .  C SEG    09E2H      REL=UNIT                114# 129 177 217 
                                                                222 239 255 270 292 
                                                                314 368 384 386 388 
                                                                390 392 394 396 409 
                                                                509 714 823 831 932 
                                                                954 1019 1050 1179 
                                                                1218 1291 1331 1384 
                                                                1507 1517 1529 1550 
                                                                1595 1715 1757 1946 
                                                                1970 2103 2109 
REN. . . . . . . .  B ADDR   0098H.4 A                          83# 
T1 . . . . . . . .  B ADDR   00B0H.5 A                          73# 
OV . . . . . . . .  B ADDR   00D0H.2 A                          45# 
FMG_DRAW_END_E3_T~  C ADDR   0962H   R  SEG=?PR?MAIN            2028# 2031 
FMG_SET_REGION_SM~  C ADDR   077FH   R  SEG=?PR?MAIN            1689# 1691 
FMG_TIMER_0_RIGHT.  C ADDR   0597H   R  SEG=?PR?MAIN            1250 1257# 
FMG_SELECT_PIECE_I  C ADDR   0422H   R  SEG=?PR?MAIN            965 990# 
FMG_DRAW_NEXT_PIE~  C ADDR   034DH   R  SEG=?PR?MAIN            864# 910 
FMG_UPDATE_STATE_~  C ADDR   020BH   R  SEG=?PR?MAIN            553# 
FMG_DRAW_SCREEN. .  C ADDR   0470H   R  SEG=?PR?MAIN            438 487 1051# 
MACRO ASSEMBLER MAIN                                       12/08/14 14:20:57 PAGE     1


DOS MACRO ASSEMBLER MA51 V06.16.13.326
OBJECT MODULE PLACED IN C:\PROJECTS\MICROCONTROLADORES\SRC\MAIN.OBJ
ASSEMBLER INVOKED BY: QUIET GENERATEDEPFILE EP SYNTAX(ASM51) PR XR PL(60) PW(80) DB OJ(C:\PROJECTS\MICROCONTROLADORES\SRC\MAIN.OBJ) PIN(C:\RAISONANCE\RIDE\INC;C:\RAISONANCE\RIDE\INC\51) 

LOC     OBJ           LINE    SOURCE
FMG_PIECE_H. . . .  N NUMB   002Ah                              341# 603 622 935 
                                                                1554 
LCD_INIT . . . . .  C ADDR   0035H   R  SEG=?PR?MAIN            178# 2106 
T2 . . . . . . . .  B ADDR   0090H.0 A                          96# 
EA . . . . . . . .  B ADDR   00A8H.7 A                          58# 418 431 
T2CON. . . . . . .  D ADDR   00C8H   A                          31# 
FMG_DRAW_END_ETER~  C ADDR   09C1H   R  SEG=?PR?MAIN            2090# 2091 
FMG_DRAW_END_E2_B~  C ADDR   09B1H   R  SEG=?PR?MAIN            2080# 2083 
FMG_DRAW_END_H1_T~  C ADDR   092CH   R  SEG=?PR?MAIN            1996# 1999 
FMG_TIMER_0_FALL .  C ADDR   05A1H   R  SEG=?PR?MAIN            1240 1248 1263# 
FMG_SELECT_PIECE_J  C ADDR   0418H   R  SEG=?PR?MAIN            970 984# 
FMG_SELECT_NEW_PI~  C ADDR   03DEH   R  SEG=?PR?MAIN            441 443 955# 1321 
                                                                
ACC. . . . . . . .  D ADDR   00E0H   A                          13# 142 179 214 228 
                                                                242 252 258 268 272 
                                                                289 294 311 723 725 
                                                                727 729 732 735 736 
                                                                737 771 778 788 795 
                                                                813 814 816 818 820 
                                                                867 869 870 871 872 
                                                                873 874 875 876 877 
                                                                878 879 880 882 884 
                                                                889 891 892 893 894 
                                                                895 896 897 898 899 
                                                                900 901 902 904 906 
                                                                1070 1072 1073 1074 
                                                                1075 1076 1077 1078 
                                                                1079 1080 1081 1082 
                                                                1083 1085 1087 1111 
                                                                1113 1114 1115 1116 
                                                                1117 1118 1119 1120 
                                                                1121 1122 1123 1124 
                                                                1126 1129 1142 1144 
                                                                1145 1146 1147 1148 
                                                                1149 1150 1151 1152 
                                                                1153 1154 1155 1157 
                                                                1159 1220 1223 1225 
                                                                1280 1282 1285 1335 
                                                                1376 1378 1381 1391 
                                                                1393 1395 1397 1425 
                                                                1426 1497 1499 1501 
                                                                1503 1604 1606 1608 
                                                                1610 1613 1616 1617 
                                                                1618 1651 1659 1674 
                                                                1682 1705 1706 1708 
                                                                1710 1712 1838 1840 
                                                                1842 1844 1855 1878 
                                                                1901 1924 
FMG_DRAW_END_E3_B~  C ADDR   09BAH   R  SEG=?PR?MAIN            2085# 2088 
FMG_DRAW_END_H2_T~  C ADDR   0935H   R  SEG=?PR?MAIN            2001# 2004 
FMG_TEST_END_LOOP.  C ADDR   08FBH   R  SEG=?PR?MAIN            1955# 1960 
FMG_SELECT_LINE_T~  C ADDR   06DEH   R  SEG=?PR?MAIN            1537# 1541 
FMG_UPDATE_STATE_~  C ADDR   022BH   R  SEG=?PR?MAIN            578 580# 
FMG_SET_REGION . .  C ADDR   071BH   R  SEG=?PR?MAIN            485 503 1317 1602# 
                                                                
FMG_TIME_TO_FALL .  N NUMB   0033h                              360# 413 1236 
C_T2 . . . . . . .  B ADDR   00C8H.1 A                          104# 
FMG_DRAW_END_H3_T~  C ADDR   093EH   R  SEG=?PR?MAIN            2006# 2009 
FMG_DRAW_END_T_H_~  C ADDR   0923H   R  SEG=?PR?MAIN            1990# 1993 
FMG_CREATE_SUPERI~  C ADDR   06C7H   R  SEG=?PR?MAIN            1510# 1513 
FMG_REMOVE_SPECIF~  C ADDR   06ADH   R  SEG=?PR?MAIN            1450 1467 1488# 
FMG_TIMER_0. . . .  C ADDR   0567H   R  SEG=?PR?MAIN            1219# 2100 
FMG_SELECT_PIECE_L  C ADDR   0413H   R  SEG=?PR?MAIN            969 981# 
FMG_GET_REGION_SM~  C ADDR   02D7H   R  SEG=?PR?MAIN            774# 776 
FMG_UPDATE_STATE_~  C ADDR   0284H   R  SEG=?PR?MAIN            700 702# 
FMG_END_GAME . . .  C ADDR   01D3H   R  SEG=?PR?MAIN            469 506# 
LCD_SEND_SERIAL_D~  C ADDR   0076H   R  SEG=?PR?MAIN            226# 236 
WR . . . . . . . .  B ADDR   00B0H.6 A                          72# 
ET0. . . . . . . .  B ADDR   00A8H.1 A                          62# 429 
FMG_VALIDATE_COLL~  C ADDR   05D3H   R  SEG=?PR?MAIN            1300 1302# 
FMG_GET_REGION_SM~  C ADDR   02E7H   R  SEG=?PR?MAIN            791# 793 
FMG_UPDATE_STATE_~  C ADDR   021AH   R  SEG=?PR?MAIN            538 564# 
FMG_DRAW_NEXT_PIE~  C ADDR   0316H   R  SEG=?PR?MAIN            449 455 832# 
FMG_PIECE_L. . . .  N NUMB   002Bh                              342# 604 623 939 
                                                                1555 
LCD_X. . . . . . .  ? ADDR   0000H   A                          162# 284 298 836 
                                                                854 917 1057 1093 
                                                                1105 1133 1185 1196 
                                                                1203 1856 1879 1902 
                                                                1925 1979 2034 2118 
                                                                
RAND16REG. . . . .  N NUMB   0021h                              111# 131 133 136 
                                                                137 141 146 148 150 
                                                                
ET1. . . . . . . .  B ADDR   00A8H.3 A                          60# 
TF0. . . . . . . .  B ADDR   0088H.5 A                          51# 
FMG_UPDATE_STATE_~  C ADDR   0709H   R  SEG=?PR?MAIN            1578 1580# 
FMG_CREATE_INFERI~  C ADDR   06D6H   R  SEG=?PR?MAIN            1520 1526# 
FMG_REMOVE_COMPLE~  C ADDR   0628H   R  SEG=?PR?MAIN            1360 1374# 
FMG_CLEAR_MEMORY_~  C ADDR   0461H   R  SEG=?PR?MAIN            1038# 1041 
FMG_GET_REGION_LO~  C ADDR   02F3H   R  SEG=?PR?MAIN            784 801 802# 
FMG_UPDATE_STATE_~  C ADDR   0272H   R  SEG=?PR?MAIN            540 686# 
FMG_PIECES_Z . . .  C ADDR   0124H   R  SEG=?PR?MAIN            391# 979 
FMG_NUMBERS_FONT .  C ADDR   00F9H   R  SEG=?PR?MAIN            370# 1852 
LCD_Y. . . . . . .  ? ADDR   0000H   A                          163# 279 299 837 
                                                                855 918 1058 1094 
                                                                1135 1137 1170 1172 
                                                                1175 1186 1197 1199 
                                                                1204 1857 1880 1903 
                                                                1926 1980 2035 2119 
                                                                
ET2. . . . . . . .  B ADDR   00A8H.5 A                          91# 
TF1. . . . . . . .  B ADDR   0088H.7 A                          49# 
FMG_SELECT_PIECE_O  C ADDR   0404H   R  SEG=?PR?MAIN            966 972# 
FMG_GET_REGION_SW~  C ADDR   02CDH   R  SEG=?PR?MAIN            763 765# 
FMG_GET_REGION_LO~  C ADDR   02A5H   R  SEG=?PR?MAIN            734# 811 
LCD_CLK. . . . . .  B ADDR   00B0H.1 A                          158# 227 234 
RAND16 . . . . . .  C ADDR   0011H   R  SEG=?PR?MAIN            130# 
RCLK . . . . . . .  B ADDR   00C8H.5 A                          100# 
TF2. . . . . . . .  B ADDR   00C8H.7 A                          98# 
MACRO ASSEMBLER MAIN                                       12/08/14 14:20:57 PAGE     2

RB8. . . . . . . .  B ADDR   0098H.2 A                          85# 
TH0. . . . . . . .  D ADDR   008CH   A                          23# 427 1277 
FMG_UPDATE_SCORE_~  C ADDR   07D5H   R  SEG=?PR?MAIN            1736 1739 1742 1745 
                                                                1748 1749# 
FMG_GET_REGION_LO~  C ADDR   02ADH   R  SEG=?PR?MAIN            739# 809 
FMG_UPDATE_STATE_~  C ADDR   01F2H   R  SEG=?PR?MAIN            529 535# 
LCD_DIN. . . . . .  B ADDR   00B0H.0 A                          159# 229 232 
EX0. . . . . . . .  B ADDR   00A8H.0 A                          63# 
IT0. . . . . . . .  B ADDR   0088H.0 A                          56# 
TH1. . . . . . . .  D ADDR   008DH   A                          24# 
FMG_CREATE_INFERI~  C ADDR   06D2H   R  SEG=?PR?MAIN            1522# 1525 
FMG_REMOVE_SPECIF~  C ADDR   0671H   R  SEG=?PR?MAIN            1422 1426 1431# 
FMG_VALIDATE_COLL~  C ADDR   05C3H   R  SEG=?PR?MAIN            457 1292# 
FMG_PIECE_0. . . .  N NUMB   002Dh                              344# 474 492 632 
                                                                947 1306 
RAND16B. . . . . .  C ADDR   001EH   R  SEG=?PR?MAIN            132 134 138# 
TCLK . . . . . . .  B ADDR   00C8H.4 A                          101# 
TB8. . . . . . . .  B ADDR   0098H.3 A                          84# 
RXD. . . . . . . .  B ADDR   00B0H.0 A                          78# 
EX1. . . . . . . .  B ADDR   00A8H.2 A                          61# 
IT1. . . . . . . .  B ADDR   0088H.2 A                          54# 
TH2. . . . . . . .  D ADDR   00CDH   A                          35# 
IE . . . . . . . .  D ADDR   00A8H   A                          25# 
FMG_UPDATE_STATE_~  C ADDR   0712H   R  SEG=?PR?MAIN            1579 1586 1587# 
FMG_SELECT_LINE_T~  C ADDR   06D8H   R  SEG=?PR?MAIN            1398 1530# 
FMG_REMOVE_COMPLE~  C ADDR   0633H   R  SEG=?PR?MAIN            1368 1380# 
FMG_LOOP_LINHA_2 .  C ADDR   04C2H   R  SEG=?PR?MAIN            1103# 1174 
FMG_CLEAR_MEMORY_~  C ADDR   046AH   R  SEG=?PR?MAIN            1044# 1047 
FMG_SELECT_PIECE_~  C ADDR   03EFH   R  SEG=?PR?MAIN            962 964# 
FMG_TEST_END . . .  C ADDR   08F1H   R  SEG=?PR?MAIN            465 1947# 
FMG_PIECE_1. . . .  N NUMB   002Eh                              345# 475 493 636 
                                                                951 1307 
RAND16C. . . . . .  C ADDR   0028H   R  SEG=?PR?MAIN            142 144# 
FMG_SET_REGION_SW~  C ADDR   075AH   R  SEG=?PR?MAIN            1647 1648# 
FMG_CREATE_SUPERI~  C ADDR   06C5H   R  SEG=?PR?MAIN            1412 1508# 
FMG_REMOVE_SPECIF~  C ADDR   064BH   R  SEG=?PR?MAIN            1401# 1495 
FMG_LOOP_LINHA_3 .  C ADDR   04BAH   R  SEG=?PR?MAIN            1097# 1176 
FMG_SELECT_PIECE_S  C ADDR   0409H   R  SEG=?PR?MAIN            967 975# 
FMG_PIECE_R. . . .  N NUMB   002Ch                              343# 550 573 598 
                                                                621 625 695 943 
SM0. . . . . . . .  B ADDR   0098H.7 A                          80# 
TXD. . . . . . . .  B ADDR   00B0H.1 A                          77# 
P. . . . . . . . .  B ADDR   00D0H.0 A                          47# 122 140 
SBUF . . . . . . .  D ADDR   0099H   A                          28# 
TL0. . . . . . . .  D ADDR   008AH   A                          21# 424 1274 
PCON . . . . . . .  D ADDR   0087H   A                          18# 
FMG_UPDATE_SCORE_~  C ADDR   07BCH   R  SEG=?PR?MAIN            1729 1734# 
FMG_SET_REGION_SW~  C ADDR   0770H   R  SEG=?PR?MAIN            1646 1671# 
FMG_DRAW_BORDER_L~  C ADDR   055DH   R  SEG=?PR?MAIN            1208# 1211 
FMG_SELECT_PIECE_T  C ADDR   041DH   R  SEG=?PR?MAIN            971 987# 
FMG_FIND_BIT_LOOP.  C ADDR   0312H   R  SEG=?PR?MAIN            827# 829 
SM1. . . . . . . .  B ADDR   0098H.6 A                          81# 
TL1. . . . . . . .  D ADDR   008BH   A                          22# 
FMG_UPDATE_SCORE_~  C ADDR   07C1H   R  SEG=?PR?MAIN            1730 1737# 
FMG_REMOVE_COMPLE~  C ADDR   0605H   R  SEG=?PR?MAIN            1342# 1373 1379 
FMG_GET_REGION_END  C ADDR   0302H   R  SEG=?PR?MAIN            807 812# 
FMG_UPDATE_STATE_~  C ADDR   0293H   R  SEG=?PR?MAIN            533 563 586 639 707 
                                                                710 712# 
FMG_PIECE_ID_H . .  N NUMB   0025h                              334# 934 998 
SM2. . . . . . . .  B ADDR   0098H.5 A                          82# 
TL2. . . . . . . .  D ADDR   00CCH   A                          34# 
FMG_DRAW_END_E_TOP  C ADDR   0950H   R  SEG=?PR?MAIN            2018# 2021 
FMG_UPDATE_SCORE_~  C ADDR   07C6H   R  SEG=?PR?MAIN            1731 1740# 
FMG_REMOVE_SPECIF~  C ADDR   0637H   R  SEG=?PR?MAIN            1375 1389# 
MACRO ASSEMBLER MAIN                                       12/08/14 14:20:57 PAGE     3

FMG_TIMER_0_LEFT .  C ADDR   0592H   R  SEG=?PR?MAIN            1249 1254# 
INIT_DELAY_2 . . .  C ADDR   00F0H   R  SEG=?PR?MAIN            319# 323 
SCON . . . . . . .  D ADDR   0098H   A                          27# 
INIT . . . . . . .  C ADDR   09C7H   R  SEG=?PR?MAIN            2096 2104# 
FMG_UPDATE_SCORE_~  C ADDR   07CBH   R  SEG=?PR?MAIN            1732 1743# 
FMG_REMOVE_SPECIF~  C ADDR   0675H   R  SEG=?PR?MAIN            1430 1433 1434# 
FMG_UPDATE_STATE_~  C ADDR   026FH   R  SEG=?PR?MAIN            617 638# 
INIT_DELAY_3 . . .  C ADDR   00EEH   R  SEG=?PR?MAIN            317# 324 
LCD_SEND_SERIAL_D~  C ADDR   0073H   R  SEG=?PR?MAIN            223# 248 264 
PT0. . . . . . . .  B ADDR   00B8H.1 A                          68# 
TMOD . . . . . . .  D ADDR   0089H   A                          20# 421 
TCON . . . . . . .  D ADDR   0088H   A                          19# 
FMG_DRAW_END_E_BO~  C ADDR   09A8H   R  SEG=?PR?MAIN            2075# 2078 
FMG_UPDATE_SCORE_~  C ADDR   07D0H   R  SEG=?PR?MAIN            1733 1746# 
FMG_SET_REGION_SM~  C ADDR   075EH   R  SEG=?PR?MAIN            1654# 1656 
FMG_CREATE_INFERI~  C ADDR   06CDH   R  SEG=?PR?MAIN            1415 1518# 
FMG_CLEAR_MEMORY_~  C ADDR   0451H   R  SEG=?PR?MAIN            1026# 1042 
FMG_UPDATE_STATE_~  C ADDR   024DH   R  SEG=?PR?MAIN            609 614# 
FMG_UPDATE_STATE_~  C ADDR   024BH   R  SEG=?PR?MAIN            599 610# 
FMG_UPDATE_STATE_~  C ADDR   0212H   R  SEG=?PR?MAIN            555 557# 
LCD_CLEAR_INTERNA~  C ADDR   00DCH   R  SEG=?PR?MAIN            303# 309 
LCD_SEND_DATA. . .  C ADDR   009DH   R  SEG=?PR?MAIN            219 256# 307 
LCD_RESET. . . . .  B ADDR   0090H.5 A                          156# 183 
EXF2 . . . . . . .  B ADDR   00C8H.6 A                          99# 
PT1. . . . . . . .  B ADDR   00B8H.3 A                          66# 
RS0. . . . . . . .  B ADDR   00D0H.3 A                          44# 182 245 261 275 
                                                                297 835 1056 1183 
                                                                1850 2113 
FMG_DRAW_END_H_E_~  C ADDR   099FH   R  SEG=?PR?MAIN            2069# 2072 
FMG_SET_REGION_SM~  C ADDR   0774H   R  SEG=?PR?MAIN            1677# 1679 
FMG_REMOVE_LINE_M~  C ADDR   06B5H   R  SEG=?PR?MAIN            1491 1494# 
FMG_LOOP_LINHA_SU~  C ADDR   0487H   R  SEG=?PR?MAIN            1067# 1092 
FMG_PIECE_ID_L . .  N NUMB   0026h                              335# 938 999 
FMG_PIECE_X. . . .  N NUMB   0023h                              328# 446 471 483 
                                                                489 501 543 559 561 
                                                                566 582 584 594 688 
                                                                1303 1315 1323 
LCD_SERIAL_END_IF.  C ADDR   0081H   R  SEG=?PR?MAIN            230 233# 
PT2. . . . . . . .  B ADDR   00B8H.5 A                          93# 
RD . . . . . . . .  B ADDR   00B0H.7 A                          71# 
TR0. . . . . . . .  B ADDR   0088H.4 A                          52# 419 430 1227 
                                                                1278 
RS1. . . . . . . .  B ADDR   00D0H.4 A                          43# 181 244 260 274 
                                                                296 834 1055 1182 
                                                                1849 2112 
F0 . . . . . . . .  B ADDR   00D0H.5 A                          42# 
FMG_SET_REGION_LO~  C ADDR   0786H   R  SEG=?PR?MAIN            1670 1693 1694# 
FMG_TIMER_0_ROTATE  C ADDR   059CH   R  SEG=?PR?MAIN            1247 1260# 
FMG_SELECT_PIECE_Z  C ADDR   040EH   R  SEG=?PR?MAIN            968 978# 
FMG_GET_REGION_LO~  C ADDR   02FFH   R  SEG=?PR?MAIN            806 810# 
FMG_UPDATE_STATE_~  C ADDR   0201H   R  SEG=?PR?MAIN            537 541# 
FMG_UPDATE_SCORE .  C ADDR   07A4H   R  SEG=?PR?MAIN            461 1716# 
FMG_TIME_TO_FALL_0  N NUMB   0032h                              359# 1230 1232 1265 
                                                                
FMG_PIECE_Y. . . .  N NUMB   0024h                              329# 447 472 484 
                                                                490 502 546 569 596 
                                                                690 704 706 1304 
                                                                1316 1324 
TR1. . . . . . . .  B ADDR   0088H.6 A                          50# 
F1 . . . . . . . .  B ADDR   00D0H.1 A                          46# 
FMG_SET_REGION_SW~  C ADDR   0754H   R  SEG=?PR?MAIN            1643 1645# 
FMG_SET_REGION_LO~  C ADDR   072CH   R  SEG=?PR?MAIN            1615# 1703 
FMG_REMOVE_COMPLE~  C ADDR   0616H   R  SEG=?PR?MAIN            1359 1362# 
FMG_CLEAR_MEMORY_~  C ADDR   0453H   R  SEG=?PR?MAIN            1028# 1031 
FMG_FIND_BIT . . .  C ADDR   0311H   R  SEG=?PR?MAIN            825# 
FMG_GET_REGION_LO~  C ADDR   02FCH   R  SEG=?PR?MAIN            804 808# 
FMG_UPDATE_STATE_~  C ADDR   0230H   R  SEG=?PR?MAIN            579 585# 
FMG_WAIT_ETERNAL .  C ADDR   0181H   R  SEG=?PR?MAIN            454# 504 
FMG_CLEAR_MEMORY .  C ADDR   044BH   R  SEG=?PR?MAIN            436 1020# 
FMG_TETRIS_MAIN. .  C ADDR   0144H   R  SEG=?PR?MAIN            410# 2121 
FMG_CONTROL_OLD. .  N NUMB   0031h                              352# 514 523 1266 
                                                                
MACRO ASSEMBLER MAIN                                       12/08/14 14:20:57 PAGE     4

TR2. . . . . . . .  B ADDR   00C8H.2 A                          103# 
PX0. . . . . . . .  B ADDR   00B8H.0 A                          69# 
ES . . . . . . . .  B ADDR   00A8H.4 A                          59# 
FMG_SET_REGION_LO~  C ADDR   0734H   R  SEG=?PR?MAIN            1620# 1701 
FMG_UPDATE_STATE_~  C ADDR   028DH   R  SEG=?PR?MAIN            701 708# 
FMG_UPDATE_STATE_~  C ADDR   0224H   R  SEG=?PR?MAIN            576# 
FMG_REMOVE_COMPLE~  C ADDR   05FBH   R  SEG=?PR?MAIN            459 1332# 
LCD_CLEAR. . . . .  C ADDR   00CEH   R  SEG=?PR?MAIN            205 293# 433 1974 
                                                                
LCD_DC . . . . . .  B ADDR   0090H.7 A                          157# 246 262 
PX1. . . . . . . .  B ADDR   00B8H.2 A                          67# 
IP . . . . . . . .  D ADDR   00B8H   A                          26# 
FMG_DRAW_END_H_E_~  C ADDR   0947H   R  SEG=?PR?MAIN            2012# 2015 
FMG_UPDATE_STATE_~  C ADDR   071AH   R  SEG=?PR?MAIN            1589 1592 1593# 
FMG_REMOVE_SPECIF~  C ADDR   0691H   R  SEG=?PR?MAIN            1459 1462# 
FMG_UPDATE_STATE_~  C ADDR   027DH   R  SEG=?PR?MAIN            698# 
FMG_PIECES_I . . .  C ADDR   0117H   R  SEG=?PR?MAIN            385# 992 
FMG_CONTROL. . . .  N NUMB   0030h                              351# 513 522 1271 
                                                                
FMG_STATE. . . . .  N NUMB   002Fh                              347# 466 709 1294 
                                                                1325 1967 
FMG_PIECE_ID_0 . .  N NUMB   0028h                              337# 851 946 1013 
                                                                
LCD_SEND_COMMAND .  C ADDR   0087H   R  SEG=?PR?MAIN            191 194 197 200 203 
                                                                208 211 240# 282 
                                                                287 
LCD_CE . . . . . .  B ADDR   0090H.6 A                          155# 184 247 249 
                                                                263 265 
PSW. . . . . . . .  D ADDR   00D0H   A                          12# 180 213 243 251 
                                                                259 267 273 288 295 
                                                                310 833 930 1054 
                                                                1177 1181 1212 1221 
                                                                1284 1759 1944 1972 
                                                                2092 
FMG_REMOVE_SPECIF~  C ADDR   0698H   R  SEG=?PR?MAIN            1460 1468# 
FMG_UPDATE_STATE_~  C ADDR   0233H   R  SEG=?PR?MAIN            539 587# 
FMG_PIECES_J . . .  C ADDR   0132H   R  SEG=?PR?MAIN            395# 985 
FMG_PIECE_ID_1 . .  N NUMB   0029h                              338# 909 950 1017 
                                                                
LCD_CLEAR_INTERNA~  C ADDR   00DEH   R  SEG=?PR?MAIN            305# 308 
RAND8REG . . . . .  N NUMB   0020h                              110# 116 119 123 
                                                                125 
RI . . . . . . . .  B ADDR   0098H.0 A                          87# 
INT0 . . . . . . .  B ADDR   00B0H.2 A                          76# 
FMG_DRAW_NEXT_PIE~  C ADDR   032AH   R  SEG=?PR?MAIN            843# 846 
FMG_GET_REGION . .  C ADDR   0294H   R  SEG=?PR?MAIN            473 491 721# 1305 
                                                                1571 
FMG_UPDATE_STATE .  C ADDR   01D7H   R  SEG=?PR?MAIN            456 510# 
FMG_FROM_WAIT_TO_~  C ADDR   03C4H   R  SEG=?PR?MAIN            442 933# 1320 
FMG_PIECE_ID_R . .  N NUMB   0027h                              336# 942 1006 
LCD_BUS. . . . . .  ? ADDR   0000H   A                          161# 190 193 196 
                                                                199 202 207 210 225 
                                                                281 286 306 839 844 
                                                                848 858 860 882 884 
                                                                904 906 912 914 920 
                                                                925 928 1085 1087 
                                                                1126 1129 1157 1159 
                                                                1193 1209 1864 1869 
                                                                1874 1887 1892 1897 
                                                                1910 1915 1920 1932 
                                                                1937 1942 1985 1991 
                                                                1997 2002 2007 2013 
                                                                2019 2024 2029 2040 
                                                                2046 2052 2058 2064 
                                                                2070 2076 2081 2086 
                                                                
INT1 . . . . . . .  B ADDR   00B0H.3 A                          75# 
CY . . . . . . . .  B ADDR   00D0H.7 A                          40# 
DPH. . . . . . . .  D ADDR   0083H   A                          17# 603 622 998 1554 
                                                                
TIMER0_INTERRUPT .  C ADDR   000BH   A                          2099# 
FMG_DRAW_BORDER_L~  C ADDR   0542H   R  SEG=?PR?MAIN            1192# 1195 
FMG_SELECT_NEW_PI~  C ADDR   0427H   R  SEG=?PR?MAIN            974 977 980 983 986 
                                                                989 993 996# 
FMG_UPDATE_STATE_~  C ADDR   01EFH   R  SEG=?PR?MAIN            520 532# 
FMG_DRAW_END . . .  C ADDR   090CH   R  SEG=?PR?MAIN            507 1971# 
FMG_PIECES_L . . .  C ADDR   0129H   R  SEG=?PR?MAIN            393# 982 
RAND8. . . . . . .  C ADDR   0000H   R  SEG=?PR?MAIN            115# 956 1003 
TI . . . . . . . .  B ADDR   0098H.1 A                          86# 
FMG_DRAW_END_T_MI~  C ADDR   0972H   R  SEG=?PR?MAIN            2039# 2042 
FMG_TEST_END_END_~  C ADDR   0908H   R  SEG=?PR?MAIN            1964 1966# 
FMG_SET_REGION_END  C ADDR   0795H   R  SEG=?PR?MAIN            1699 1704# 
FMG_REMOVE_SPECIF~  C ADDR   066DH   R  SEG=?PR?MAIN            1425 1428# 
FMG_DRAW_NEXT_PIE~  C ADDR   03B5H   R  SEG=?PR?MAIN            924# 927 
IE0. . . . . . . .  B ADDR   0088H.1 A                          55# 
FMG_UPDATE_STATE_~  C ADDR   0716H   R  SEG=?PR?MAIN            1585 1590# 
FMG_REMOVE_SPECIF~  C ADDR   06B8H   R  SEG=?PR?MAIN            1493 1496# 
FMG_VALIDATE_COLL~  C ADDR   05CDH   R  SEG=?PR?MAIN            1293 1298# 
FMG_TIMER_0_END. .  C ADDR   05ACH   R  SEG=?PR?MAIN            1252 1256 1259 1262 
                                                                1268 1270# 
FMG_DRAW_BORDER_L~  C ADDR   0540H   R  SEG=?PR?MAIN            1190# 1201 
FMG_CLEAR_MEMORY_~  C ADDR   045AH   R  SEG=?PR?MAIN            1033# 1036 
MACRO ASSEMBLER MAIN                                       12/08/14 14:20:57 PAGE     5

FMG_GRID . . . . .  N NUMB   0040h                              366# 751 1022 1062 
                                                                1337 1365 1369 1419 
                                                                1446 1455 1632 1948 
                                                                
RAND8B . . . . . .  C ADDR   0007H   R  SEG=?PR?MAIN            117 120# 
IE1. . . . . . . .  B ADDR   0088H.3 A                          53# 



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2537    ----
   XDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


REGISTER BANK(S) USED : 0 

ASSEMBLY COMPLETE.   0 WARNING(S)   0 ERROR(S)
